# Properties file for Default Java ARP Options (Mac OS X)
# RE  2007-04-14  JA 0.9.4

# Notes on URL handling:
# -Each name ending ".uri" actually refers to a URL, "mailto:",
# "urn:" etc. being obviously unacceptable.
# -Each URL designated as a base URL, against which relative URLs
# may be resolved, should end with a '/' character.
# -A relative URL will be resolved against the base URL associated with
# the given options file:
#   for the built-in options:             JA Installation directory;
#   for the JA default options:           User's home directory;
#   for the application-specific options: Working directory (app) or
#                                         Codebase (applet).

# Flag: Use AWT components exclusively (for JOGL's sake).
# (Not honoured by all current apps/applets).
do.use.awt.only                 = false

# Flag: Show generation and display times for each animation frame.
do.show.animation.times         = false
# Flag: Use a streamed implementation of SiGML input and animation,
# allowing the player's performance of the animation to start as soon
# as this process produces some animation data (rather than have the
# player wait until the entire animation is available.
do.streamed.animation.build     = true

# Flag: Perform "skin-sliding" enhancement on avatar's forearm.
do.avatar.skin.sliding          = false
# Flag: Perform "self-sliding" enhancement at avatar's shoulder.
do.avatar.self.sliding          = false

# Application window's left-top (x,y) and (width,height) values.
app.window.loc.size             = 584:4:432:580

# Camera settings for avatar view.
camera.settings                 = 0.0:0.22:1.5:10.0:17.0:30.0

# Base URL for avatar configuration folder, the so-called animgen
# configuration folder, with one sub-folder for each avatar, containing
# the avatar definition file and other avatar-specific data.
#avatar.config.base.uri          = agconfig/
# Avatar ID for animgen: arpman, marc, ...
#avatar.id                       = anna
# Flag: is an app's Avatar menu to place groups of avatars such
# as the BBC Jam avatars on their own submenus?
# (The reason for doing this is to reduce overall menu length, so
# that a Swing Avatar menu is not long enough for its lower end to
# get erroneously drawn over by a JOGL avatar panel.)
avatar.menu.do.use.submenus     = false

# Specs. for possible submenus of the Avatar menu.  Each spec.
# desribes one potential submenu, the specs. being separated by "|".
# A spec. consists of a category (submenu) name and a list of avatar
# names in that category, the category and list being separated by ":".
# The names in the list itself are separated by "/".  Whitespace may
# appear on either side of any name.
avatar.submenu.specs            = BBC JAM : beatrice / genie / robotboy \
                                | LinguaSign : luna / siggi
# URL for a special initial avatar definition file
# ("null" or empty string means none).
avatar.special.definition.uri   = null
# Version string for avatar definition
# ("null" or empty string means standard version, currently 2.2).
avatar.definition.version       = null
# URL of  the file to take any saved avatar definition.
avatar.definition.save.uri      = null
# Flag: is the initial JARP avatar definition to be saved or not?
avatar.definition.do.save       = false

# URL for animgen log file ("null" or empty string value mean stderr).
animgen.log.file.uri            = null
# Flag: is animgen logging switched on or off?
animgen.do.log                  = false
# Flag: when animgen uses a log file, is logging output to be appended
# to or to overwrite the file?
animgen.log.do.append           = true
# Frames-per-second value for animgen.
animgen.fps                     = 50

# Default base URL for SiGML documents.
default.sigml.base.uri          = sigml/

# Initial lookahead period in ms for streamed animation: the player will
# wait until it has enough frames to cover this period before starting
# animation.
player.initial.lookahead.ms     = 800
# Frame drift limit in ms: the player will drop any frame, apart from
# the last or any other reprieved frame (see below), whose predecessor
# overruns by more than this time; a value of zero means "no limit"
# (except for the start time of the following frame).
player.frame.drift.limit.ms     = 0
# Frame drop period limit in ms: when the player drops a contiguous
# range of frames and the total time period of these dropped frames
# frames becomes at least equal to this value then the following frame
# will be reprieved, i.e. it will be played even if it is due to be
# dropped.
# A negative value is interpreted as "no limit" i.e. never reprieve a
# frame due to be dropped.
player.drop.range.limit.ms      = 125
# Flag: Should average (per-frame) animation time data be logged?
player.do.log.animation.summary = true
# Flag: Should summary statistics about dropped frames be logged?
player.do.log.dropped.frames.summary \
                                = true
# Flag: should the player automatically log dropped frames on the console?
# (Regardless of this setting, the player panel will pass dropped-frame
# events to any client event handler, which on its own account may or
# may not log the event.)
player.do.log.dropped.frames    = false
# Flag: Show generation and display times for each animation frame.
player.do.show.animation.times  = false

# Flag: should there be ambient motion during the avatar's idle periods?
do.idle.ambient                 = true
# Flag: should there be ambient motion during the avatar's busy periods,
# i.e. while animation is in progress?
do.busy.ambient                 = false
# Scale factor for ambient motion during the avatar's idle periods:
# Floating-point value in the range [0..1].
idle.ambient.max.scale          = 1
# Scale factor for ambient motion during the avatar's busy periods, i.e.
# while animation is in progress:
# Floating-point value in the range [0..1].
busy.ambient.max.scale          = 1
# Number of milliseconds to wait before starting ambient motion when
# an avatar is initially loaded:
# Non-negative integer, or -1 (in fact, any negative value), indicating
# an infinite wait -- i.e. suppress the initial ambient motion.
idle.ambient.initial.wait.ms    = 4
# Number of milliseconds to wait before starting ambient motion after
# an animation stops, or after manual display of a new animation frame:
# Non-negative integer, or -1 (in fact, any negative value), indicating
# an infinite wait -- i.e. suppress ambient motion after an animation
# stops.
idle.ambient.continue.wait.ms   = 3000

# Flag: is v2.1 avatar input in VJJ ARP format?
v21.avatar.is.vjj.arp           = false
# Flag: is the (input) mesh-point duplicates data in the new
# simple format or not?
mesh.duplicates.format.is.new   = true

# URL for the separate texture input file, if any.
texture.input.uri               = null
# Flag: does texture input come from a separate file or not?
texture.input.is.separate       = false
# Flag: does texture input file use "J-ARP Image Bytes" (JIB) format
# or not?
texture.input.format.is.jarp    = true
# Flag: is the texture input compressed or not?
texture.input.is.compressed     = true
# Flag: is the texture input vertically flipped or not?
# Currently permitted only for non-JIB (i.e. PNG) images.
texture.input.is.flipped        = false

# File name for the separate texture output file, if any;
# ("null" or empty string means use existing built-in texture name)
# this will be resolved against the main saved avatar definition URL.
texture.separate.file.name      = null
# Flag: when saving the main JARP avatar definition, is the texture
# output to be directed to a separate file or not?
# (In the latter case, it will be appended to the avatar definition
# output stream.)
texture.output.is.separate      = false
# Flag: is texture output (in whatever context) to be compressed or
# not?
texture.output.do.compressed    = true
# Flag: is texture output (in whatever context) to be in PNG format or
# not?
texture.output.do.png           = false
# Flag: is PNG texture output (in whatever context) to be flipped or
# not?
texture.output.do.flip.png      = true
# URL for the stand-alone saved texture output file, if any.
texture.save.file.uri           = null
# Flag: is the texture to be saved in a stand-alone file or not?
# This has no effect in the case where the main avatar definition
# is being saved, but with the texture in a separate file
# (since in that case the texture will be saved anyway).
texture.do.save                 = false
