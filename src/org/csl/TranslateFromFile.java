/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.csl;

import edu.stanford.nlp.trees.Tree;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import static org.csl.MyUtils.constructAnnotatedTree;
import static org.csl.MyUtils.writeToFile;
import static org.csl.Nlp4.getDependencies;

/**
 *
 * @author Rehman
 */
public class TranslateFromFile extends javax.swing.JFrame {

    public static ArrayList<String> sentences = new ArrayList();
    Nlp4 parser = new Nlp4(); 
    JFileChooser chooser;
    String chooserTitle = "Open Text File";
    static String filePath = "";
    static String fileName = "";
    /**
     * Creates new form Test
     */
    public TranslateFromFile() {
        
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        txtSentenceNo.setText("1");
        if(!Preferences.preferencesInitialized){
            Preferences.setUserPreferences();
        }
        if(MyUtils.verbs.size()==0){
            MyUtils.initializeVerbsHashtable();
            System.out.println("Verb entries ="+MyUtils.verbs.size());
        }
        if(MyUtils.rules.size()==0){
            MyUtils.readRulesFile();
            System.out.println(MyUtils.rules.size()+" rules found.");
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtSentenceNo = new javax.swing.JTextField();
        lbl1 = new javax.swing.JLabel();
        btnTranslate = new javax.swing.JButton();
        btnTranslateNext = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txpOriginalSentence = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        txpTranslatedSentence = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        txpPSLTree = new javax.swing.JTextPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        txpEnglishTree = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnOpenFile = new javax.swing.JButton();
        lblFileName = new javax.swing.JLabel();

        setTitle("Translate from File");

        jPanel1.setBackground(new java.awt.Color(182, 207, 164));

        txtSentenceNo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        lbl1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lbl1.setText("Sentence NO: ");

        btnTranslate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnTranslate.setText("Translate");
        btnTranslate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTranslateActionPerformed(evt);
            }
        });

        btnTranslateNext.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnTranslateNext.setText("Translate Next");
        btnTranslateNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTranslateNextActionPerformed(evt);
            }
        });

        txpOriginalSentence.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jScrollPane1.setViewportView(txpOriginalSentence);

        txpTranslatedSentence.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jScrollPane2.setViewportView(txpTranslatedSentence);

        jScrollPane3.setViewportView(txpPSLTree);

        jScrollPane4.setViewportView(txpEnglishTree);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText(" English Tree");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText(" PSL Tree");

        btnOpenFile.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnOpenFile.setText("Open File");
        btnOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenFileActionPerformed(evt);
            }
        });

        lblFileName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblFileName.setForeground(new java.awt.Color(204, 51, 0));
        lblFileName.setText("No File Selected");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1)
                    .addComponent(btnTranslateNext, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTranslate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnOpenFile, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(lbl1)
                        .addGap(18, 18, 18)
                        .addComponent(txtSentenceNo, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSentenceNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl1)
                    .addComponent(btnOpenFile)
                    .addComponent(lblFileName))
                .addGap(18, 18, 18)
                .addComponent(btnTranslate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTranslateNext)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTranslateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTranslateActionPerformed
        // TODO add your handling code here:
        int sentenceNo = Integer.parseInt(txtSentenceNo.getText());
        PrintStream err = System.err;
        System.setErr(new PrintStream(new OutputStream() {
            public void write(int b) {
            }
        }));

        if(sentenceNo<1||sentenceNo>sentences.size()){
            txpOriginalSentence.setText("Sentence No "+sentenceNo+" not found.");
        }else{
            String str = sentences.get(sentenceNo-1);
            txpOriginalSentence.setText(str);
            Tree tree = parser.parse(str);
            String treeOutput=tree.toString();
            System.out.println("Stanford Tree output:\n"+treeOutput+"\n");

            String str2 = str.replace("?", ""); // remove question mark if any (dependency tool correction)
            String dep= getDependencies(str2);
            System.out.println(dep);

            MyTree tree3= MyUtils.constructAnnotatedTree(treeOutput,dep);
            MyList list = MyUtils.constructAnnotatedList(treeOutput, dep);

            MyUtils.printTense(str, tree3);
            //tree3.printTreeDiagramToFile(str);
            
            int type = MyUtils.getSentenceStructureType(list);
            System.out.println("Type = "+type);
            if(type==1){
                MyUtils.renameTree(str, tree3);
                String engTree = tree3.getTreeDiagram();
                txpEnglishTree.setText(engTree);
                MyUtils.constructPSLTree(tree3);
                String PSLTree = tree3.getTreeDiagram();
                txpPSLTree.setText(PSLTree);
                String output = tree3.toString();
                if(str.contains("?")){
                    output+="?";
                }else{
                    output+=".";
                }
                txpTranslatedSentence.setText(output);
            }else{
                String output = MyUtils.translate(str, tree3, list);
                txpPSLTree.setText(MyUtils.pslTreeComplex);
                txpTranslatedSentence.setText(output);
                MyUtils.renameTree(str, tree3);
                String engTree = tree3.getTreeDiagram();
                txpEnglishTree.setText(engTree);
            }
        }
        // set error to normal again
        System.setErr(err); 
    }//GEN-LAST:event_btnTranslateActionPerformed

    private void btnTranslateNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTranslateNextActionPerformed
        // TODO add your handling code here:
        int sentenceNo = Integer.parseInt(txtSentenceNo.getText())+1;
        if(sentenceNo<1||sentenceNo>sentences.size()){
            txpOriginalSentence.setText("Sentence No "+sentenceNo+" not found.");
            txpTranslatedSentence.setText("");
            txpEnglishTree.setText("");
            txpPSLTree.setText("");
            return;
        }
        txtSentenceNo.setText(Integer.toString(sentenceNo));
        PrintStream err = System.err;
        System.setErr(new PrintStream(new OutputStream() {
            public void write(int b) {
            }
        }));

        String str = sentences.get(sentenceNo-1);
        txpOriginalSentence.setText(str);
        Tree tree = parser.parse(str);
        String treeOutput=tree.toString();
        System.out.println("Stanford Tree output:\n"+treeOutput+"\n");
        
        String str2 = str.replace("?", ""); // remove question mark if any (dependency tool correction)
        String dep= getDependencies(str2);
        System.out.println(dep);
        
        MyTree tree3= MyUtils.constructAnnotatedTree(treeOutput,dep);
        MyList list = MyUtils.constructAnnotatedList(treeOutput, dep);

        MyUtils.printTense(str, tree3);
        //tree3.printTreeDiagramToFile(str);

        int type = MyUtils.getSentenceStructureType(list);
        System.out.println("Type = "+type);
        if(type==1){
            MyUtils.renameTree(str, tree3);
            String engTree = tree3.getTreeDiagram();
            txpEnglishTree.setText(engTree);
            MyUtils.constructPSLTree(tree3);
            String PSLTree = tree3.getTreeDiagram();
            txpPSLTree.setText(PSLTree);
            String output = tree3.toString();
            if(str.contains("?")){
                output+="?";
            }else{
                output+=".";
            }
            txpTranslatedSentence.setText(output);
        }else{
            String output = MyUtils.translate(str, tree3, list);
            txpPSLTree.setText(MyUtils.pslTreeComplex);
            txpTranslatedSentence.setText(output);
            MyUtils.renameTree(str, tree3);
            String engTree = tree3.getTreeDiagram();
            txpEnglishTree.setText(engTree);
        }
        // set error to normal again
        System.setErr(err); 
    }//GEN-LAST:event_btnTranslateNextActionPerformed

    private void btnOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenFileActionPerformed
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle(chooserTitle);
        chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        
        if(chooser.showOpenDialog(this)== JFileChooser.APPROVE_OPTION){
            String name = chooser.getSelectedFile().getPath();
            if(name.contains(".txt")){
                filePath = name;
                fileName = chooser.getSelectedFile().getName();
                readTextFile();
                lblFileName.setText(fileName+" ("+sentences.size()+" sentences)");
                lblFileName.setForeground(Color.BLUE);
            }
            System.out.println("getCurrentDirectory(): "+ chooser.getCurrentDirectory());
            System.out.println("getSelectedFile(): "+ chooser.getSelectedFile());
        }else{
            System.out.println("No selection.");
        }
    }//GEN-LAST:event_btnOpenFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TranslateFromFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TranslateFromFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TranslateFromFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TranslateFromFile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TranslateFromFile().setVisible(true);
            }
        });
    }
    public static void readTextFile(){
        // this function translates a text file (line by line) and writes in output file
        //String path = "C:/Users/Rehman/Desktop/test3.txt";
        File file = new File(filePath);
        if(file.exists()){
            sentences.clear();
            try{
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            String s="";
            String sentence = "";
            //int count = 0;
            while((s=br.readLine())!=null){
                //count++;
                //System.out.println("Translating Line no= "+count);
                for(int i=0; i<s.length(); i++){
                    sentence+=s.charAt(i);
                    if(sentence.equals(" ")){
                        sentence="";
                    }
                    if(s.charAt(i)=='.'||s.charAt(i)=='?'){
                        sentences.add(sentence);
                        sentence = "";
                    }
                }
            }
            }catch(Exception e){
                e.printStackTrace();
            }
        }else{
            System.out.println("Error: File "+filePath+" not found.");
        }   
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOpenFile;
    private javax.swing.JButton btnTranslate;
    private javax.swing.JButton btnTranslateNext;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lbl1;
    private javax.swing.JLabel lblFileName;
    private javax.swing.JTextPane txpEnglishTree;
    private javax.swing.JTextPane txpOriginalSentence;
    private javax.swing.JTextPane txpPSLTree;
    private javax.swing.JTextPane txpTranslatedSentence;
    private javax.swing.JTextField txtSentenceNo;
    // End of variables declaration//GEN-END:variables
}
