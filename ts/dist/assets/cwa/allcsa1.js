//-------- js/CWASA.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var AvatarGUI, Config, Env, _configureCWA, _cwasaInitialise, avPanels, cfg, console, cwaenv, cwasaHTMLForSToCA, cwasaInit, document, log, playSiGMLText, playSiGMLURL, setTimeout, stat, stopSiGML, theSToCA;
    cwaenv = this.getCWAEnv();
    console = this.console;
    document = this.document;
    setTimeout = this.setTimeout;
    log = console.log.bind(console);
    
    Config = cwaenv.get("Config");
    AvatarGUI = cwaenv.get("AvatarGUI");
    Env = cwaenv.get("CWAEnv");
    theSToCA = cwaenv.get("theSToCA");

    cfg = Config.theConfig;
    avPanels = [];
    stat = function (msg) {
        var avp, j, len, results;
        results = [];
        for (j = 0, len = avPanels.length; j < len; j++) {
            avp = avPanels[j];
            results.push(avp != null ? avp.stat(msg) : void 0);
        }
        return results;
    };
    _configureCWA = function (configDone, ccfgpath, initCfg) {
        log("CWASA configuration starts: " + ccfgpath);
        return Config.load(configDone, ccfgpath, initCfg);
    };
    _cwasaInitialise = function () {
        var N_AVS, avadivs, guidivs, i, initAv, j, k, ref, ref1, ref2, ref3, stocadivs;
        log("CWASA initialisation starts");
        N_AVS = cfg.avSettings.length;
        initAv = "luna";
        for (i = j = 0, ref = N_AVS; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            guidivs = document.getElementsByClassName("CWASAPanel av" + i);
            avadivs = document.getElementsByClassName("CWASAAvatar av" + i);
            if ((guidivs.length + avadivs.length) > 0) {
                initAv = cfg.avSettings[i].initAv;
                avPanels[i] = new AvatarGUI(i, cfg.avSettings[i]);
            } else {
                avPanels[i] = null;
            }
        }
        for (i = k = 0, ref1 = N_AVS; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
            if (avPanels[i]) {
                avPanels[i].startAvatar();
            }
        }
        stat("navigator.javaEnabled()=\"" + (typeof navigator !== "undefined" && navigator !== null ? navigator.javaEnabled() : void 0) + "\"");
        stat("navigator.mimeTypes has application/x-java-applet=\"" + (((ref2 = navigator.mimeTypes) != null ? ref2['application/x-java-applet'] : void 0) != null) + "\"");
        stat("Platform=" + Env.platTag + " Browser=" + Env.browTag + " Java=" + Env.hasJava);
        if (cfg.animgenProc === "Applet") {
            if (Env.hasJava) {
                stocadivs = document.getElementsByClassName("SToCA");
                if (stocadivs[0] != null) {
                    stat("Animgen by deprecated Java Applet");
                    if ((ref3 = stocadivs[0]) != null) {
                        ref3.innerHTML = cwasaHTMLForSToCA(initAv);
                    }
                } else {
                    cfg.animgenProc = "Client";
                    stat("Animgen finds no Java Applet element on page");
                    Env.hasJava = false;
                }
                theSToCA.initialise();
            } else {
                cfg.animgenProc = "Client";
                stat("Animgen finds Java unavailable for Applet");
            }
        } else {
            stat("Animgen by " + cfg.animgenProc);
        }
        log("CWASA initialisation ends");
        return void 0;
    };
    cwasaInit = function (initCfg) {
        log("CWASA loading configuration");
        return _configureCWA(_cwasaInitialise, "assets/cwa/cwaclientcfg.json", initCfg);
    };
    cwasaHTMLForSToCA = function (av) {
        var applethtml, attributes, avlist, mkparam, objecthtml, parameters;
        log("Creating element for SToCA applet with avatar " + av);
        avlist = cfg.allavs.join(":");
        mkparam = function (n, v) {
            return "<param name=\"" + n + "\" value=\"" + v + "\" />";
        };
        applethtml = "<!--========================================================-->\n<applet name=\"stocapplet\" id=\"stocApplet\" class=\"stocApplet\" width=\"1\"  height=\"1\" >\n    " + (mkparam("jnlp_href", cfg.jasBase + "jnlp/SToCA.jnlp")) + "\n    " + (mkparam("avatar.id.list", avlist)) + "\n    " + (mkparam("cacheable.avatar.list", avlist)) + "\n    " + (mkparam("avatar.id", av)) + "\n    " + (mkparam("camera.settings", "0.0:0.230:3.3:9.0:18.0:30.0:-1.0:-1.0")) + "\n    " + (mkparam("avatar.fps", cfg.animgenFPS)) + "\n</applet>";
        objecthtml = "<!--========================================================-->\n<object type=\"application/x-java-applet\" id=\"stocApplet\" class=\"stocApplet\" width=\"1\"  height=\"1\" >\n    " + (mkparam("jnlp_href", cfg.jasBase + "jnlp/SToCA.jnlp")) + "\n    " + (mkparam("avatar.id.list", avlist)) + "\n    " + (mkparam("cacheable.avatar.list", avlist)) + "\n    " + (mkparam("avatar.id", av)) + "\n    " + (mkparam("camera.settings", "0.0:0.230:3.3:9.0:18.0:30.0:-1.0:-1.0")) + "\n    " + (mkparam("avatar.fps", cfg.animgenFPS)) + "\n</object>";
        attributes = {
            name: "stocApplet",
            id: "stocApplet",
            "class": "stocApplet",
            codebase: "" + cfg.jasBase,
            code: "app.SToCApplet",
            archive: "jars/use-jarp.jar, jars/jarpb.jar, jars/avatars/avatar-basic.jar, jars/sigmlinlib.jar, jars/antlr-3.5.2-complete.jar, jogl/jogl.jar, jogl/gluegen-rt.jar",
            width: 1,
            height: 1
        };
        parameters = {
            codebase_lookup: "false",
            scriptable: "true",
            options: "SToCApplet",
            "ja.version.tag": cfg.jasVersionTag,
            "ja.remote.base.url": cfg.jasBase,
            "ja.force.remote.ja.home": "true",
            "avatar.id.list": avlist,
            "cacheable.avatar.list": avlist,
            "avatar.id": av,
            "do.streamed.animation.build": "true",
            "camera.settings": "0.0:0.230:3.3:9.0:18.0:30.0:-1.0:-1.0",
            "avatar.fps": cfg.animgenFPS,
            "quit.delay.ms": "400",
            jnlp_href: "jnlp/SToCA.jnlp"
        };
        if (Env.browTag === "IE") {
            return applethtml;
        } else {
            return objecthtml;
        }
    };
    cwaenv.add(cwasaInit, "cwasaInit");
    playSiGMLText = (function (_this) {
        return function (stext, av) {
          
            var avP;
            if (av == null) {
                av = 0;
            }
            if (avP = avPanels[av]) {
                avP.playSiGMLText(stext);
                return "Played SiGML for avatar " + av;
            } else {
                return "Undefined avatar " + av;
            }
        };
    })(this);
    playSiGMLURL = (function (_this) {
        return function (surl, av) {
            var avP;
            if (av == null) {
                av = 0;
            }
            if (avP = avPanels[av]) {
                avP.playSiGMLURL(surl);
                return "Played SiGML from URL for avatar " + av;
            } else {
                return "Undefined avatar " + av;
            }
        };
    })(this);
    stopSiGML = (function (_this) {
        return function (av) {
            var avP;
            if (av == null) {
                av = 0;
            }
            if (avP = avPanels[av]) {
                avP.stopPlay();
                return "Stopped SiGML for avatar " + av;
            } else {
                return "Undefined avatar " + av;
            }
        };
    })(this);
    this.CWASA = {
        init: cwasaInit,
        playSiGMLURL: playSiGMLURL,
        playSiGMLText: playSiGMLText,
        stopSiGML: stopSiGML
    };
}).call(this);
//--------  END  --------