
//-------- js/AnimScheduler.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var AnimScheduler, console, cwaenv, document, log, loglev, setTimeout;
    cwaenv = this.getCWAEnv();
    console = this.console;
    document = this.document;
    setTimeout = this.setTimeout;
    loglev = 0;
    log = loglev > 0 ? console.log.bind(console) : function () {};
    AnimScheduler = (function () {
        function AnimScheduler(casAnim, _playFrame, _doneAnim, _getSpeed, _reportGSF, _updateFPS, _rqstAnim) {
            this.casAnim = casAnim;
            this._playFrame = _playFrame;
            this._doneAnim = _doneAnim;
            this._getSpeed = _getSpeed;
            this._reportGSF = _reportGSF;
            this._updateFPS = _updateFPS;
            this._rqstAnim = _rqstAnim;
            if (this._getSpeed == null) {
                this._getSpeed = function () {
                    return 1;
                };
            }
            this._needsResetClock = true;
        }
        AnimScheduler.prototype.restart = function () {
            this._needsResetClock = true;
            this.clckBase = 0;
            this.clckCur = 0;
            this.animBase = 0;
            this.animCur = 0;
            this.speedCur = this._getSpeed();
            this.frameCur = -1;
            this.isStopped = false;
            this.isSuspended = false;
            this.oneStepUpIsPending = false;
            this.oneStepDownIsPending = false;
            this.casAnim.reset();
            if (this._updateFPS) {
                this._resetFPS();
            }
            return this._rqstNextTick();
        };
        AnimScheduler.prototype.suspend = function () {
            return this.isSuspended = true;
        };
        AnimScheduler.prototype.resume = function () {
            return this.isSuspended = false;
        };
        AnimScheduler.prototype.showPreviousFrame = function () {
            if (this.isSuspended) {
                return this.oneStepDownIsPending = true;
            }
        };
        AnimScheduler.prototype.showNextFrame = function () {
            if (this.isSuspended) {
                return this.oneStepUpIsPending = true;
            }
        };
        AnimScheduler.prototype.stop = function () {
            this.isStopped = true;
            return this.isSuspended = false;
        };
        AnimScheduler.prototype._doResetClock = function (clknow) {
            this._needsResetClock = false;
            return this.clckBase = this.clckCur = Date.now();
        };
        AnimScheduler.prototype._clockTime = function (animT) {
            return this.clckBase + (animT - this.animBase) / this.speedCur;
        };
        AnimScheduler.prototype._animTime = function (clockT) {
            return this.animBase + (clockT - this.clckBase) * this.speedCur;
        };
        AnimScheduler.prototype._rqstNextTick = function (delay) {
            if (delay == null) {
                delay = 0;
            }
            return this._rqstAnim(((function (_this) {
                return function (cnow) {
                    return _this._doNextStep(cnow);
                };
            })(this)), Math.max(delay, 0));
        };
        AnimScheduler.prototype._doNextStep = function (clknow) {
            if (this._needsResetClock) {
                this._doResetClock(clknow);
            }
            if (this.isStopped) {
                return this._doneAnim();
            } else {
                return this._doNormalStep(clknow);
            }
        };
        AnimScheduler.prototype._doNormalStep = function (clknow) {
            var clkprev, deltaclk, frame, newSpeed;
            clkprev = this.clckCur;
            this.clckCur = Date.now();
            deltaclk = this.clckCur - clkprev;
            if ((newSpeed = this._getSpeed()) !== this.speedCur) {
                this.speedCur = newSpeed;
                this.clckBase = this.clckCur;
                this.animBase = this.animCur;
            }
            frame = null;
            if (this.isSuspended) {
                if (this.oneStepDownIsPending) {
                    frame = this.casAnim.getPreviousFrame();
                    this.oneStepDownIsPending = false;
                } else if (this.oneStepUpIsPending) {
                    frame = this.casAnim.getNextFrame();
                    this.oneStepUpIsPending = false;
                }
                if (frame) {
                    this.animCur = frame.getTime();
                }
                this.clckBase = this.clckCur;
                this.animBase = this.animCur;
            } else {
                this.animCur = this._animTime(this.clckCur);
            }
            if (!frame) {
                frame = this.casAnim.getFrame(this.animCur);
            }
            return this._completeCurrentStep(frame, deltaclk);
        };
        AnimScheduler.prototype._completeCurrentStep = function (frame, deltaclk) {
            var delay, f, g, ref, s;
            ref = this.casAnim.getSignAndFrameInfo(), g = ref[0], s = ref[1], f = ref[2];
            this._reportGSF(g, s, f, !(Boolean(frame)));
            if (frame) {
                if (f === this.frameCur) {
                    log("Frame " + f + " repeated");
                } else {
                    this.frameCur++;
                    if (f > this.frameCur) {
                        log(("Frame " + this.frameCur) + (f - 1 > this.frameCur ? " to " + (f - 1) + " skipped" : " skipped"));
                        this.frameCur = f;
                    }
                }
                this._playFrame(frame, deltaclk);
                delay = (this._clockTime(frame.getTime() + frame.getDuration())) - Date.now();
                this._rqstNextTick(Math.max(delay, 10));
            } else {
                this._doneAnim();
            }
            return this._checkFPS(deltaclk);
        };
        AnimScheduler.prototype._resetFPS = function () {
            this.clkFPSBase = this.clckCur;
            this.tFPSAccum = 0;
            return this.nFPSTicks = 0;
        };
        AnimScheduler.prototype._checkFPS = function (deltaclk) {
            if (this._updateFPS) {
                this.tFPSAccum += deltaclk;
                this.nFPSTicks += 1;
                if (1000 <= this.tFPSAccum) {
                    this._updateFPS(this.nFPSTicks * 1000 / this.tFPSAccum);
                    return this._resetFPS();
                }
            }
        };
        return AnimScheduler;
    })();
    cwaenv.add(AnimScheduler, "AnimScheduler");
}).call(this);