//-------- js/AvDefView.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var AvDefView, FourCC, RQ, V3, console, cwaenv, document, log, setTimeout;
    cwaenv = this.getCWAEnv();
    console = this.console;
    document = this.document;
    setTimeout = this.setTimeout;
    log = console.log.bind(console);
    FourCC = cwaenv.get("FourCC");
    V3 = cwaenv.get("E3Vec");
    RQ = cwaenv.get("RotQuat");
    AvDefView = (function () {
        function AvDefView(av, data, pngURIGen) {
            var fpsc, ref;
            this.av = av;
            this.data = data;
            this.pngURIGen = pngURIGen;
            this.i = 0;
            ref = [0, 0, 25], this.ic = ref[0], this.tc = ref[1], fpsc = ref[2];
        }
        AvDefView.prototype.nextUbyte = function () {
            var ii;
            ii = this.i;
            this.i += 1;
            return this.data.getUint8(ii);
        };
        AvDefView.prototype.nextUshort = function () {
            var ii;
            ii = this.i;
            this.i += 2;
            return this.data.getUint16(ii, true);
        };
        AvDefView.prototype.nextUint = function () {
            var ii;
            ii = this.i;
            this.i += 4;
            return this.data.getUint32(ii, true);
        };
        AvDefView.prototype.nextFloat = function () {
            var ii;
            ii = this.i;
            this.i += 4;
            return this.data.getFloat32(ii, true);
        };
        AvDefView.prototype.nextBool = function () {
            return this.nextUbyte() !== 0;
        };
        AvDefView.prototype.nextStr = function () {
            var i, j, len, ref, ref1, str;
            ref = [this.nextUint(), ""], len = ref[0], str = ref[1];
            for (j = i = 0, ref1 = len; 0 <= ref1 ? i < ref1 : i > ref1; j = 0 <= ref1 ? ++i : --i) {
                str += String.fromCharCode(this.nextUbyte());
            }
            return str;
        };
        AvDefView.prototype.nextStr4cc = function () {
            return FourCC.fourCCInt(this.nextStr());
        };
        AvDefView.prototype.nextVec2 = function () {
            var i, j, results;
            results = [];
            for (j = i = 0; i < 2; j = ++i) {
                results.push(this.nextFloat());
            }
            return results;
        };
        AvDefView.prototype.nextVec3 = function () {
            var j;
            return V3.copyOfV3((function () {
                var i, results;
                results = [];
                for (j = i = 0; i < 3; j = ++i) {
                    results.push(this.nextFloat());
                }
                return results;
            }).call(this));
        };
        AvDefView.prototype.nextQuat = function () {
            var j;
            return RQ.copyOfQV((function () {
                var i, results;
                results = [];
                for (j = i = 0; i < 4; j = ++i) {
                    results.push(this.nextFloat());
                }
                return results;
            }).call(this));
        };
        AvDefView.prototype.nextMorphSet = function () {
            var ms, nml, ost, vtx, wgt;
            vtx = this.nextUint();
            wgt = this.nextFloat();
            ost = this.nextVec3();
            nml = this.nextVec3();
            return ms = {
                vertex: vtx,
                weight: wgt,
                offset: ost,
                normal: nml
            };
        };
        AvDefView.prototype.nextCASMorph = function () {
            var amt, id4, morph;
            id4 = this.nextUint();
            amt = this.nextFloat();
            return morph = {
                id4cc: id4,
                amount: amt
            };
        };
        AvDefView.prototype.nextCASTRSet = function () {
            var id4, rtn, trn, trset;
            id4 = this.nextUint();
            trn = this.nextVec3();
            rtn = this.nextQuat();
            return trset = {
                id4cc: id4,
                trans: trn,
                rot: rtn
            };
        };
        AvDefView.prototype.resetCASTiming = function (fps) {
            var ref;
            return ref = [0, 0, fps], this.ic = ref[0], this.tc = ref[1], this.fpsc = ref[2], ref;
        };
        AvDefView.prototype.nextCASFrame = function () {
            var bns, dur, frame, icur, inxt, m, mphs, nm, nt, ref, s, tcur, tnxt;
            inxt = this.ic + 1;
            tnxt = inxt * (1000 / this.fpsc);
            ref = [this.ic, this.tc, tnxt - this.tc, inxt, tnxt], icur = ref[0], tcur = ref[1], dur = ref[2], this.ic = ref[3], this.tc = ref[4];
            nm = this.nextUint();
            mphs = (function () {
                var i, ref1, results;
                results = [];
                for (m = i = 0, ref1 = nm; 0 <= ref1 ? i < ref1 : i > ref1; m = 0 <= ref1 ? ++i : --i) {
                    results.push(this.nextCASMorph());
                }
                return results;
            }).call(this);
            nt = this.nextUint();
            bns = (function () {
                var i, ref1, results;
                results = [];
                for (s = i = 0, ref1 = nt; 0 <= ref1 ? i < ref1 : i > ref1; s = 0 <= ref1 ? ++i : --i) {
                    results.push(this.nextCASTRSet());
                }
                return results;
            }).call(this);
            return frame = {
                time: tcur,
                duration: dur,
                morphs: mphs,
                bones: bns
            };
        };
        AvDefView.prototype.nextSkelBone = function () {
            var bone, id4, iix, len, pr4, rtn, trn;
            id4 = this.nextUint();
            pr4 = this.nextUint();
            trn = this.nextVec3();
            rtn = this.nextQuat();
            iix = this.nextQuat();
            len = this.nextFloat();
            return bone = {
                id4cc: id4,
                parent4cc: pr4,
                trans: trn,
                rot: rtn,
                invInitXRot: iix,
                length: len
            };
        };
        AvDefView.prototype.checkBytes = function (lo, n, pfx) {
            var bhex, i, ihex, k, lpad, ref, ref1, str, thisadv;
            thisadv = this;
            lpad = function (s, w) {
                var i, ixs, ns, ref, ref1, ref2, ss;
                ref = [s, s.length], ss = ref[0], ns = ref[1];
                if (ns < w) {
                    for (ixs = i = ref1 = ns, ref2 = w; ref1 <= ref2 ? i < ref2 : i > ref2; ixs = ref1 <= ref2 ? ++i : --i) {
                        ss = "0" + ss;
                    }
                }
                return ss;
            };
            bhex = function (b) {
                return lpad(b.toString(16), 2);
            };
            ihex = function (z) {
                return lpad(z.toString(16), 8);
            };
            str = "";
            for (k = i = ref = lo, ref1 = lo + n; ref <= ref1 ? i < ref1 : i > ref1; k = ref <= ref1 ? ++i : --i) {
                str += (bhex(this.data.getUint8(k))) + " ";
            }
            return log((ihex(lo)) + " " + (pfx || '') + ": " + str);
        };
        AvDefView.prototype.bin2str = function (getfun, lo, n) {
            var k, parts;
            parts = (function () {
                var i, ref, ref1, results;
                results = [];
                for (k = i = ref = lo, ref1 = lo + n; ref <= ref1 ? i < ref1 : i > ref1; k = ref <= ref1 ? ++i : --i) {
                    results.push(String.fromCharCode(getfun(k)));
                }
                return results;
            })();
            return parts.join("");
        };
        AvDefView.prototype.base64Str = function (getfun, lo, n, pfx) {
            var chars, k;
            chars = (function () {
                var i, ref, ref1, results;
                results = [];
                for (k = i = ref = lo, ref1 = lo + n; ref <= ref1 ? i < ref1 : i > ref1; k = ref <= ref1 ? ++i : --i) {
                    results.push(String.fromCharCode(getfun(k)));
                }
                return results;
            })();
            return window.btoa(chars.join(""));
        };
        return AvDefView;
    })();
    cwaenv.add(AvDefView, "AvDefView");
}).call(this);