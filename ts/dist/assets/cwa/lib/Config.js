//-------- js/Config.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var Config, Data, console, cwaenv, document, location, log, setTimeout, zip;
    cwaenv = this.getCWAEnv();
    console = this.console;
    document = this.document;
    location = this.location;
    zip = this.zip;
    setTimeout = this.setTimeout;
    log = console.log.bind(console);
    Data = cwaenv.get("Data");
    Config = (function () {
        function Config() {}
        Config._INSTALL_CFG = "/assets/cwa/cwacfg.json";
        Config.theConfig = {
            clientBase: Data.absoluteURI("", location.toString()),
            animgenProc: "Client"
        };
        Config.updateObj = function (theObj, defVals) {
            var key, results, val;
            results = [];
            for (key in defVals) {
                val = defVals[key];
                if (!theObj.hasOwnProperty(key)) {
                    results.push(theObj[key] = val);
                } else {
                    results.push(void 0);
                }
            }
            return results;
        };
        Config.updateConfig = function (defVals) {
            return this.updateObj(this.theConfig, defVals);
        };
        Config.load = function (CB, path, initCfg) {
            var clientURI, cwaConfigLoad, loadDone;
            loadDone = (function (_this) {
                return function () {
                    var avs, base, defaultAv, defaults, i, j, key, len, len1, ref, ref1, ref2, ref3, ref4;
                    defaultAv = {
                        width: 384,
                        height: 320,
                        avList: "avs",
                        initAv: "anna",
                        background: null,
                        initCamera: [0, 0.23, 3.24, 5, 18, 30, -1, -1],
                        allowFrameSteps: true,
                        initSiGMLURL: "iTakeMug.sigml",
                        allowSiGMLText: true
                    };
                    defaults = {
                        jasVersionTag: "loc2018",
                        animgenFPS: 50,
                        sigmlBase: "sigml",
                        avJARBase: "avatars",
                        avJSONBase: "avjson",
                        useAvatarJARs: true,
                        avs: ["anna", "marc", "francoise"],
                        avSettings: [defaultAv]
                    };
                    _this.updateConfig(defaults);
                    if ((base = _this.theConfig).avBase == null) {
                        base.avBase = _this.theConfig.useAvatarJARs ? _this.theConfig.avJARBase : _this.theConfig.avJSONBase;
                    }
                    ref = ["sigmlBase", "avJARBase", "avJSONBase", "avBase"];
                    for (i = 0, len = ref.length; i < len; i++) {
                        key = ref[i];
                        _this.theConfig[key] = Data.absoluteURI(Data.asDir(_this.theConfig[key]), _this.theConfig.jasBase);
                    }
                    if (!(Array.isArray(_this.theConfig.avSettings))) {
                        _this.theConfig.avSettings = [_this.theConfig.avSettings];
                    }
                    ref1 = _this.theConfig.avSettings;
                    for (j = 0, len1 = ref1.length; j < len1; j++) {
                        avs = ref1[j];
                        _this.updateObj(avs, defaultAv);
                    }
                    _this._fixReferences();
                    zip.useWebWorkers = false;
                    if ((ref2 = _this.theConfig) != null ? (ref3 = ref2.animgenServer) != null ? ref3.startsWith("stoca:") : void 0 : void 0) {
                        _this.theConfig.animgenProc = "Applet";
                    } else if (((ref4 = _this.theConfig) != null ? ref4.animgenServer : void 0) != null) {
                        _this.theConfig.animgenProc = "Server";
                    }
                    log("Selected " + _this.theConfig.animgenProc + " for SiGML processing");
                    return CB();
                };
            })(this);
            cwaConfigLoad = (function (_this) {
                return function () {
                    var cwaURI;
                    if (_this.theConfig.jasBase == null) {
                        log("Config: Installation base \"http://localhost/jas/loc2018/\" used for jasBase");
                    }
                    _this.theConfig.jasBase = Data.asDir(_this.theConfig.jasBase || "/assets/");  
                    _this.theConfig.cwaBase = Data.absoluteURI(Data.asDir(_this.theConfig.cwaBase || "cwa"), _this.theConfig.jasBase);
                    _this.updateConfig({
                        useCwaConfig: true
                    });
                    if (_this.theConfig.useCwaConfig) {
                        cwaURI = Data.absoluteURI(Config._INSTALL_CFG, _this.theConfig.cwaBase);
                        return _this._loadJSON(loadDone, cwaURI);
                    } else {
                        return loadDone();
                    }
                };
            })(this);
            this.updateConfig(initCfg);
            this.updateConfig({
                useClientConfig: initCfg == null
            });
            if (this.theConfig.useClientConfig) {
                clientURI = Data.absoluteURI(path, this.theConfig.clientBase);
                this._loadJSON(cwaConfigLoad, clientURI);
            } else {
                cwaConfigLoad();
            }
            return this.theConfig;
        };
        Config._loadJSON = function (CB, uri) {
            var JSONCB;
            JSONCB = (function (_this) {
                return function (json, eCount, eMsg) {
                    if (eCount > 0) {
                        log("Config: " + eMsg + " for \"" + uri + "\"");
                    } else {
                        _this.updateConfig(json);
                    }
                    return CB();
                };
            })(this);
            return Data.fetchJSON(uri, JSONCB);
        };
        Config._fixReferences = function () {
            var allavs, i, len, newall, ref, stg;
            allavs = this.theConfig.allavs || [];
            ref = this.theConfig.avSettings;
            for (i = 0, len = ref.length; i < len; i++) {
                stg = ref[i];
                if (!(typeof stg.avList === "string")) {
                    continue;
                }
                stg.avList = this.theConfig[stg.avList];
                if ((stg.avList.indexOf(stg.initAv)) < 0) {
                    stg.avList.push(stg.initAv);
                }
                newall = allavs.concat(stg.avList.filter((function (itm) {
                    return (allavs.indexOf(itm)) < 0;
                })));
                allavs = newall;
            }
            return this.theConfig.allavs = allavs;
        };
        Config.getAvBase = function (av) {
            var b;
            b = Data.asDir(this.theConfig.avBase);
            if (this.theConfig.useAvatarJARs) {
                return this.theConfig.avBase;
            } else {
                return "" + this.theConfig.avBase + av + "/";
            }
        };
        return Config;
    })();
    cwaenv.add(Config, "Config");
}).call(this);