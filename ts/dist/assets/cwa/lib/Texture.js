//-------- js/Texture.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var Data, Texture, console, cwaenv, document, log, setTimeout;
    cwaenv = this.getCWAEnv();
    console = this.console;
    document = this.document;
    setTimeout = this.setTimeout;
    log = console.log.bind(console);
    Data = cwaenv.get("Data");
    Texture = (function () {
        function Texture(_gl, _tURLGen, _mustFlip) {
            this._gl = _gl;
            this._tURLGen = _tURLGen;
            this._mustFlip = _mustFlip;
            this._texture = this._gl.createTexture();
            this._textureState = "loading";
            this._texture.image = new Image;
            this._texture.image.onload = ((function (_this) {
                return function () {
                    return _this._buildTexture();
                };
            })(this));
            this._tURLGen(this._getTextureURLHandler());
        }
        Texture.prototype.isValid = function () {
            return this._textureState === "bound";
        };
        Texture.prototype.getHandle = function () {
            return this._texture;
        };
        Texture.prototype._getTextureURLHandler = function () {
            return (function (_this) {
                return function (turl) {
                    if (turl) {
                        return _this._texture.image.src = turl;
                    } else {
                        return log("Texture: URL is null.");
                    }
                };
            })(this);
        };
        Texture.prototype._buildTexture = function () {
            var doBind, imgSrc, srcDesc;
            imgSrc = this._texture.image.src;
            srcDesc = Data.isDataURL(imgSrc) ? "data URL" : imgSrc;
            doBind = this._textureState === "binding";
            this._textureState = "loaded";
            if (doBind) {
                return this.bind();
            }
        };
        Texture.prototype.bind = function () {
            var ex, imgSrc, srcDesc;
            imgSrc = this._texture.image.src;
            srcDesc = Data.isDataURL(imgSrc) ? "data URL" : imgSrc;
            switch (this._textureState) {
                case "loading":
                    return this._textureState = "binding";
                case "loaded":
                    this._gl.bindTexture(this._gl.TEXTURE_2D, this._texture);
                    this._gl.pixelStorei(this._gl.UNPACK_FLIP_Y_WEBGL, this._mustFlip);
                    try {
                        this._gl.texImage2D(this._gl.TEXTURE_2D, 0, this._gl.RGBA, this._gl.RGBA, this._gl.UNSIGNED_BYTE, this._texture.image);
                    } catch (error) {
                        ex = error;
                        log("Caught error building texture: " + ex);
                    }
                    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MAG_FILTER, this._gl.LINEAR);
                    this._gl.texParameteri(this._gl.TEXTURE_2D, this._gl.TEXTURE_MIN_FILTER, this._gl.LINEAR_MIPMAP_LINEAR);
                    this._gl.generateMipmap(this._gl.TEXTURE_2D);
                    this._gl.bindTexture(this._gl.TEXTURE_2D, null);
                    return this._textureState = "bound";
                default:
                    return log("Texture: unexpected state " + this._textureState + " for binding source " + srcDesc);
            }
        };
        Texture.prototype.release = function () {
            var imgSrc, srcDesc;
            imgSrc = this._texture.image.src;
            srcDesc = Data.isDataURL(imgSrc) ? "data URL" : imgSrc;
            switch (this._textureState) {
                case "binding":
                    return this._textureState = "loading";
                case "bound":
                    return this._textureState = "loaded";
                default:
                    return log("Texture: unexpected state " + this._textureState + " for releasing source " + srcDesc);
            }
        };
        return Texture;
    })();
    cwaenv.add(Texture, "Texture");
}).call(this);