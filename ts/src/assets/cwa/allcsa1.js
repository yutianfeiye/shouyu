//-------- js/CWASA.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var AvatarGUI, Config, Env, _configureCWA, _cwasaInitialise, 
		avPanels, cfg, console, cwaenv, cwasaHTMLForSToCA, cwasaInit, 
		document, log, playSiGMLText, playSiGMLURL, setTimeout, stat, stopSiGML, theSToCA,initCfg;
    cwaenv = this.getCWAEnv();
    console = this.console;
    document = this.document;
    setTimeout = this.setTimeout;
    log = console.log.bind(console);
    
    Config = cwaenv.get("Config");
    AvatarGUI = cwaenv.get("AvatarGUI");
    Env = cwaenv.get("CWAEnv");
    theSToCA = cwaenv.get("theSToCA");

    cfg = Config.theConfig;
    avPanels = [];
    stat = function (msg) {
        var avp, j, len, results;
        results = [];
        for (j = 0, len = avPanels.length; j < len; j++) {
            avp = avPanels[j];
            results.push(avp != null ? avp.stat(msg) : void 0);
        }
        return results;
    };
    _configureCWA = function (configDone, ccfgpath, initCfg) {
		this.initCfg=initCfg;
        log("CWASA configuration starts: " + ccfgpath);
        return Config.load(configDone, ccfgpath, initCfg);
    };
    _cwasaInitialise = function () {
        var N_AVS, avadivs, guidivs, i, initAv, j, k, ref, ref1, ref2, ref3, stocadivs;
        log("CWASA initialisation starts");
        N_AVS = cfg.avSettings.length;
       // initAv = "luna";

        for (i = j = 0, ref = N_AVS; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
            guidivs = document.getElementsByClassName("CWASAPanel av" + i);
            avadivs = document.getElementsByClassName("CWASAAvatar av" + i);
			for(j in this.initCfg){
				cfg.avSettings[i][j]=this.initCfg[j];
			}
            if ((guidivs.length + avadivs.length) > 0) {
             //   initAv = cfg.avSettings[i].initAv;
                avPanels[i] = new AvatarGUI(i, cfg.avSettings[i]);
            } else {
                avPanels[i] = null;
            }
        }
        for (i = k = 0, ref1 = N_AVS; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
            if (avPanels[i]) {
                avPanels[i].startAvatar();
            }
        }
        stat("Animgen by " + cfg.animgenProc);
        log("CWASA initialisation ends");
        return void 0;
    };
    cwasaInit = function (initCfg) {
        log("CWASA loading configuration");
        return _configureCWA(_cwasaInitialise, "/assets/cwa/cwaclientcfg.json", initCfg);
    };
 
    cwaenv.add(cwasaInit, "cwasaInit");
    playSiGMLText = (function (_this) {
        return function (stext, av) {
          
            var avP;
            if (av == null) {
                av = 0;
            }
            if (avP = avPanels[av]) {
                avP.playSiGMLText(stext);
                return "Played SiGML for avatar " + av;
            } else {
                return "Undefined avatar " + av;
            }
        };
    })(this);
    playSiGMLURL = (function (_this) {
        return function (surl, av) {
            var avP;
            if (av == null) {
                av = 0;
            }
            if (avP = avPanels[av]) {
                avP.playSiGMLURL(surl);
                return "Played SiGML from URL for avatar " + av;
            } else {
                return "Undefined avatar " + av;
            }
        };
    })(this);
    stopSiGML = (function (_this) {
        return function (av) {
            var avP;
            if (av == null) {
                av = 0;
            }
            if (avP = avPanels[av]) {
                avP.stopPlay();
                return "Stopped SiGML for avatar " + av;
            } else {
                return "Undefined avatar " + av;
            }
        };
    })(this);
    this.CWASA = {
        init: cwasaInit,
        playSiGMLURL: playSiGMLURL,
        playSiGMLText: playSiGMLText,
        stopSiGML: stopSiGML
    };
}).call(this);
//--------  END  --------