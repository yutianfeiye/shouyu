//-------- js/AvatarGUI.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var AvSpeedController, AvatarGUI, Config, HTMLForAvatarGUI, SigningAvatar, console, cwaenv, document, log, setTimeout, theConfig, theSToCA,
        bind = function (fn, me) {
            return function () {
                return fn.apply(me, arguments);
            };
        };
    cwaenv = this.getCWAEnv();
    console = this.console;
    document = this.document;
    setTimeout = this.setTimeout;
    log = console.log.bind(console);
    Config = cwaenv.get("Config");
    AvSpeedController = cwaenv.get("AvSpeedController");
    SigningAvatar = cwaenv.get("SigningAvatar");
    HTMLForAvatarGUI = cwaenv.get("HTMLForAvatarGUI");
    theSToCA = cwaenv.get("theSToCA");
    theConfig = Config.theConfig;

    AvatarGUI = (function () {
        function AvatarGUI(avIndex, avSettings) {
            var allDiv, avEvtHandlers, avaDiv, div, htmlgen, i, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, len8, len9, m, n, o, p, q, r, ref, ref1, speedFun, theDivs;
            this.avIndex = avIndex;
            this.avEvtLoadDone = bind(this.avEvtLoadDone, this);
            this.avEvtLoadStarts = bind(this.avEvtLoadStarts, this);
            this.stat = bind(this.stat, this);
            this.initAv = avSettings.initAv;
            log("Starting AvatarGUI " + this.avIndex + " ...");
            htmlgen = new HTMLForAvatarGUI(this.avIndex, avSettings);
            allDiv = document.getElementsByClassName("CWASAPanel av" + this.avIndex);
            if ((ref = allDiv[0]) != null) {
                ref.innerHTML = htmlgen.allHTML();
            }
            avaDiv = document.getElementsByClassName("CWASAAvatar av" + this.avIndex);
            if ((ref1 = avaDiv[0]) != null) {
                ref1.innerHTML = htmlgen.htmlForAv();
            }
            this.domEls = this._getDOMEls();
           // this.guiDisablePlay();
            avEvtHandlers = {
                fps: this.avEvtFPS.bind(this),
                atFrame: this.avEvtAtFrame.bind(this),
                avLoadStarts: this.avEvtLoadStarts.bind(this),
                avLoadDone: this.avEvtLoadDone.bind(this),
                animLoading: this.avEvtSiGMLLoading.bind(this),
				animActive: this.avEvtAnimActive.bind(this),
				animIdle: this.avEvtAnimIdle.bind(this)
            };
			var speedFun=function(){
				var speed=1.0
				if(avSettings['speed']){
					speed=avSettings['speed'];
				}
				return  Math.pow(2,speed/ 2);
			};
            this.avatar = new SigningAvatar(this, this.domEls.avCanvas[0], speedFun, avEvtHandlers);
        }
        AvatarGUI.prototype.stat = function (msg) {
            var i, j, len, len1, slel, statels, statlogels, status, stel;
            msg = theConfig.animgenProc + ": " + msg;
            statels = document.getElementsByClassName("statusExtra av" + this.avIndex);
            for (i = 0, len = statels.length; i < len; i++) {
                stel = statels[i];
                stel.value = msg;
            }
            msg = (((new Date).toISOString()).substr(11, 12)) + " [" + this.avIndex + "] " + msg;
            statlogels = document.getElementsByClassName("statusLog");
            for (j = 0, len1 = statlogels.length; j < len1; j++) {
                slel = statlogels[j];
                slel.value += "[av" + this.avIndex + "] " + msg + "\n";
            }
            log(msg);
            return status = msg;
        };
        AvatarGUI.prototype.startAvatar = function () {
            this.initGUI();
            return this.avatar.switchAvatar(this.initAv);
        };
        AvatarGUI.prototype.playSiGMLText = function (sigml) {
            this._sIndex = -1;
            return this.avatar.playSiGML(sigml);
        };
        AvatarGUI.prototype.playSiGMLURL = function (sigmlurl) {
            this._sIndex = -1;
            return this.avatar.playSiGMLURL(sigmlurl);
        };
        AvatarGUI.prototype.playSiGMLTextFromEl = function (sigmltxtel) {
            var ref, sigml;
            sigml = (ref = sigmltxtel[0]) != null ? ref.value : void 0;
            this._sIndex = -1;
            return this.playSiGMLText(sigml);
        };
        AvatarGUI.prototype.playSiGMLURLFromEl = function (sigmlurlel) {
            var ref, sigmlurl;
            sigmlurl = (ref = sigmlurlel[0]) != null ? ref.value : void 0;
            this._sIndex = -1;
            return this.playSiGMLURL(sigmlurl);
        };
        AvatarGUI.prototype.stopPlay = function () {
            return this.avatar.stopPlay();
        };
        AvatarGUI.prototype.suspendPlay = function () {
            return this.avatar.suspendPlay();
        };
        AvatarGUI.prototype.resumePlay = function () {
            return this.avatar.resumePlay();
        };
		AvatarGUI.prototype.avEvtAnimActive = function () {
            return true;
        };
        AvatarGUI.prototype.avEvtAnimIdle = function () {
            return true;
        };
        AvatarGUI.prototype.showPreviousFrame = function () {
            return this.avatar.showPreviousFrame();
        };
        AvatarGUI.prototype.showNextFrame = function () {
            return this.avatar.showNextFrame();
        };
        AvatarGUI.prototype.handleURLKey = function (evt) {
            var chr;
            chr = evt.which || evt.keyCode;
            if (chr === theSToCA.RETURN_CHAR) {
                if (evt.preventDefault != null) {
                    evt.preventDefault();
                } else {
                    evt.returnValue = false;
                }
                return this.playSiGMLURLFromEl(this.domEls.sigmlURL);
            }
        };
        AvatarGUI.prototype._setElsValue = function (els, newval) {
            var el, i, len, results;
            results = [];
            for (i = 0, len = els.length; i < len; i++) {
                el = els[i];
                results.push(el.value = newval);
            }
            return results;
        };
        AvatarGUI.prototype._setElsOnclick = function (els, hdlr) {
            var el, i, len, results;
            results = [];
            for (i = 0, len = els.length; i < len; i++) {
                el = els[i];
                results.push(el.onclick = hdlr);
            }
            return results;
        };
        AvatarGUI.prototype._setElsDisabled = function (els, isDis) {
            var el, i, len, results;
            results = [];
            for (i = 0, len = els.length; i < len; i++) {
                el = els[i];
                results.push(el.disabled = isDis);
            }
            return results;
        };
        AvatarGUI.prototype.avEvtFPS = function (newfps) {
            //return this._setElsValue(this.domEls.fps, "" + (newfps.toFixed(2)));
        };
        AvatarGUI.prototype.avEvtAtFrame = function (gloss, s, f, isDone) {
            if (s !== this._sIndex || f !== this._fIndex || isDone) {
             //   this._setElsValue(this.domEls.signAndFrame, s + "/" + f);
             //   this._fIndex = f;
            //    if (s !== this._sIndex) {
            //        this._setElsValue(this.domEls.gloss, "" + gloss);
            //        return this._sIndex = s;
            //    }
            }
        };
        AvatarGUI.prototype.avEvtLoadStarts = function (av) {

        };
        AvatarGUI.prototype.avEvtLoadDone = function (av) {
           
        };
        AvatarGUI.prototype.avEvtSiGMLLoading = function () {
         
        };
 
        AvatarGUI.prototype.initGUI = function () {
            var avm, avmenu, i, len, textsu;
            this.nSFD = 0;
            return  void 0;
        };

        AvatarGUI.prototype._getDOMEls = function () {
            var avix, bttnForAv, domels, elForAv, txtForAv, txtaForAv;
            avix = this.avIndex;
            elForAv = function (tag) {
                var elms;
                elms = document.getElementsByClassName(tag + " av" + avix);
                if (elms.length === 0) {} else {
                    if (elms.length > 1) {
                        log("Multiple (" + elms.length + ") elements for " + tag + " av" + avix);
                    }
                }
                return elms;
            };
            bttnForAv = function (btag) {
                return elForAv("bttn" + btag);
            };
            txtForAv = function (ttag) {
                return elForAv("txt" + ttag);
            };
            txtaForAv = function (tatag) {
                return elForAv("txta" + tatag);
            };
            return domels = {
                avCanvas: elForAv("canvasAv")
            };
        };
        return AvatarGUI;
    })();
    cwaenv.add(AvatarGUI, "AvatarGUI");
}).call(this);