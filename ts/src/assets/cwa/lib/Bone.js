//-------- js/Bone.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var Bone, FourCC, RQ, TRX, V3, console, cwaenv, document, log, setTimeout;
    cwaenv = this.getCWAEnv();
    console = this.console;
    document = this.document;
    setTimeout = this.setTimeout;
    log = console.log.bind(console);
    FourCC = cwaenv.get("FourCC");
    V3 = cwaenv.get("E3Vec");
    RQ = cwaenv.get("RotQuat");
    TRX = cwaenv.get("TRXform");
    Bone = (function () {
        function Bone() {
            this.parent = null;
            this.fourCCName = this.parentFourCCName = 0;
            this.localTrans = null;
            this.localRot = null;
            this.inverseInitRotationX = null;
            this.length = 0;
            this.doWristTwist = this.doShoulderTwist = false;
            this.childBones = [];
            this.globalTRX = TRX.create();
            this.bindPoseTRX = TRX.create();
            this.invBindPoseTRX = TRX.create();
            this.skinTRX = TRX.create();
        }
        Bone.DEGS_TO_RADS = RQ.DEGS_TO_RADS;
        Bone.RADS_TO_DEGS = RQ.RADS_TO_DEGS;
        Bone.LUPA_4CC = FourCC.fourCCInt("LUPA");
        Bone.RUPA_4CC = FourCC.fourCCInt("RUPA");
        Bone.LLRA_4CC = FourCC.fourCCInt("LLRA");
        Bone.RLRA_4CC = FourCC.fourCCInt("RLRA");
        Bone.fromJSON = function (jsnbone) {
            var bone;
            bone = new Bone;
            bone.setFromJSON(jsnbone);
            return bone;
        };
        Bone.fromBin = function (avdv) {
            var bone;
            bone = new Bone;
            bone.setFromBin(avdv);
            return bone;
        };
        Bone.prototype.setFromJSON = function (jsnbone) {
            var CVT4cc;
            CVT4cc = FourCC.fourCCInt;
            this.fourCCName = CVT4cc(jsnbone.id4cc);
            this.parentFourCCName = CVT4cc(jsnbone.parent4cc);
            this.localTrans = V3.copyOfV3(jsnbone.trans);
            this.localRot = RQ.copyOfQV(jsnbone.rot);
            this.inverseInitRotationX = jsnbone.invInitXRot;
            this.length = jsnbone.length;
            return this.setSlideFlags();
        };
        Bone.prototype.setFromBin = function (avdv) {
            var xyz, xyzw;
            this.fourCCName = avdv.nextUint();
            this.parentFourCCName = avdv.nextUint();
            this.localTrans = (function () {
                var j, len, ref, results;
                ref = avdv.nextVec3();
                results = [];
                for (j = 0, len = ref.length; j < len; j++) {
                    xyz = ref[j];
                    results.push(xyz);
                }
                return results;
            })();
            this.localRot = (function () {
                var j, len, ref, results;
                ref = avdv.nextQuat();
                results = [];
                for (j = 0, len = ref.length; j < len; j++) {
                    xyzw = ref[j];
                    results.push(xyzw);
                }
                return results;
            })();
            this.inverseInitRotationX = (function () {
                var j, len, ref, results;
                ref = avdv.nextQuat();
                results = [];
                for (j = 0, len = ref.length; j < len; j++) {
                    xyzw = ref[j];
                    results.push(xyzw);
                }
                return results;
            })();
            this.length = avdv.nextFloat();
            return this.setSlideFlags();
        };
        Bone.prototype.setSlideFlags = function () {
            var B, ID4;
            B = Bone;
            ID4 = this.fourCCName;
            this.doShoulderTwist = ID4 === B.LUPA_4CC || ID4 === B.RUPA_4CC;
            return this.doWristTwist = ID4 === B.LLRA_4CC || ID4 === B.RLRA_4CC;
        };
        Bone.prototype.setParent = function (prnt) {
            return this.parent = prnt;
        };
        Bone.prototype.getGlobalTRX = function () {
            return this.globalTRX;
        };
        Bone.prototype.getParent = function () {
            return this.parent;
        };
        Bone.prototype.getChild = function (i) {
            return this.childBones[i];
        };
        Bone.prototype.addChild = function (cb) {
            return this.childBones.push(cb);
        };
        Bone.prototype.isRoot = function () {
            return this.parent === null;
        };
        Bone.prototype.get4CC = function () {
            return this.fourCCName;
        };
        Bone.prototype.getParent4CC = function () {
            return this.parentFourCCName;
        };
        Bone.prototype.getLength = function () {
            return this.length;
        };
        Bone.prototype.getLocalRot = function () {
            return this.localRot;
        };
        Bone.prototype.getInvInitRotX = function () {
            return this.inverseInitRotationX;
        };
        Bone.prototype.doesTwist = function () {
            return this.doShoulderTwist || this.doWristTwist || this.parentDoesWristTwist();
        };
        Bone.prototype.parentDoesWristTwist = function () {
            return this.parent !== null && (this.parent.doWristTwist());
        };
        Bone.prototype.doesShoulderTwist = function () {
            return this.doShoulderTwist;
        };
        Bone.prototype.doesWristTwist = function () {
            return this.doWristTwist;
        };
        Bone.prototype.getBindPoseTRX = function () {
            return this.bindPoseTRX;
        };
        Bone.prototype.getInvBindPoseTRX = function () {
            return this.invBindPoseTRX;
        };
        Bone.prototype.updateLocalTransAndRot = function (newtrs) {
            this.localTrans = newtrs.getTranslation();
            return this.localRot = newtrs.getRotation();
        };
        Bone.prototype.updateLocalRot = function (newtrs) {
            return this.localRot = newtrs.getRotation();
        };
        Bone.prototype.computeGlobalTransforms = function () {
            var child, j, len, ref, results;
            this.globalTRX.copyTRV(this.localTrans, this.localRot);
            if (!this.isRoot()) {
                this.globalTRX.setPreStar(this.parent.getGlobalTRX());
            }
            ref = this.childBones;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
                child = ref[j];
                results.push(child.computeGlobalTransforms());
            }
            return results;
        };
        Bone.prototype.generateBindPoseData = function () {
            this.bindPoseTRX.copyTRX(this.globalTRX);
            this.invBindPoseTRX.copyTRX(this.globalTRX);
            return this.invBindPoseTRX.setInvert();
        };
        Bone.prototype.generateSkinMatRows = function (m) {
            this.skinTRX.copyTRX(this.globalTRX);
            this.skinTRX.setPostStar(this.invBindPoseTRX);
            this.skinTRX.convertToRowsMat3x4(m);
            return m;
        };
        Bone.prototype.idStr = function () {
            return FourCC.fourCCStr(this.fourCCName);
        };
        /*-------- for debugging --------
        idStr: -> FourCC.fourCCStr @fourCCName
        #----
        showTRMat: (tag, m) ->
        #--------
        SP = " "
        rowStr = (i) -> RQ.qStr (m[i+4*j] for j in [0...4]), 2
        id = do @idStr
        log "#{id} #{tag}:"
        log "        #{rowStr i}" for i in [0...4]
        */
        return Bone;
    })();
    cwaenv.add(Bone, "Bone");
}).call(this);