//-------- js/CASFrame.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var CASFrame, CASMorph, CASTRSet, console, cwaenv, document, log, setTimeout;
    cwaenv = this.getCWAEnv();
    console = this.console;
    document = this.document;
    setTimeout = this.setTimeout;
    log = console.log.bind(console);
    CASTRSet = cwaenv.get("CASTRSet");
    CASMorph = cwaenv.get("CASMorph");
    CASFrame = (function () {
        function CASFrame() {
            this.timeStamp = this.duration = 0;
            this.trSets = this.morphs = this.trSetMap = this.morphMap = null;
            this.sign = null;
        }
        CASFrame.MAP_LO_SIZE = 8;
        CASFrame.NO_MORPHS = [];
        CASFrame.fromJSON = function (jsnframe) {
            var frame;
            frame = new CASFrame;
            frame.setFromJSON(jsnframe);
            return frame;
        };
        CASFrame.fromXML = function (frmel) {
            var frame;
            frame = new CASFrame;
            frame.setFromXML(frmel);
            return frame;
        };
        CASFrame.fromBin = function (avdv) {
            var frame;
            frame = new CASFrame;
            frame.setFromBin(avdv);
            return frame;
        };
        CASFrame.create = function (time, dur, bones, morphs) {
            var frame;
            frame = new CASFrame;
            frame.set(time, dur, bones, morphs);
            return frame;
        };
        CASFrame.getFrameRate = function (frames) {
            var frameok;
            frameok = frames && frames.length !== 0;
            if (frameok) {
                return 1000 / frames[0].duration;
            } else {
                return 25;
            }
        };
        CASFrame.prototype.copyCASFrame = function (frame) {
            return this.copy(frame.getTime(), frame.getDuration(), frame.getTRSets(), frame.getMorphs());
        };
        CASFrame.prototype.copy = function (time, dur, bones, morphvec) {
            return this.set(time, dur, bones.slice(), morphvec != null ? morphvec.slice() : void 0);
        };
        CASFrame.prototype.setCASFrameBM = function (bones, morphs) {
            return this.set(-1, 0, bones, morphs);
        };
        CASFrame.prototype.setCASFrameTBM = function (time, bones, morphs) {
            return this.set(time, 0, bones, morphs);
        };
        CASFrame.prototype.setFromJSON_TD = function (jsnframe, t, dur) {
            this.setFromJSON(jsnframe);
            this.time = t;
            return this.duration = dur;
        };
        CASFrame.prototype.setFromJSON = function (jsnframe) {
            var JMPHS, bones, morphs;
            JMPHS = jsnframe.morphs;
            morphs = JMPHS.length === 0 ? null : JMPHS.map(CASMorph.fromJSON);
            bones = jsnframe.bones.map(CASTRSet.fromJSON);
            return this.set(jsnframe.time, jsnframe.duration, bones, morphs);
        };
        CASFrame.prototype.setFromXML = function (frmel) {
            var NB, NM, b, bones, dur, fbones, fmphs, j, k, m, morphs, ref, ref1, time;
            morphs = null;
            bones = [];
            time = Number(frmel.getAttribute("time"));
            dur = Number(frmel.getAttribute("duration"));
            fmphs = frmel.getElementsByTagName("morph");
            fbones = frmel.getElementsByTagName("bone");
            NM = fmphs.length;
            NB = fbones.length;
            if (NM !== 0) {
                morphs = [];
                for (m = j = 0, ref = NM; 0 <= ref ? j < ref : j > ref; m = 0 <= ref ? ++j : --j) {
                    morphs.push(CASMorph.fromXML(fmphs.item(m)));
                }
            }
            for (b = k = 0, ref1 = NB; 0 <= ref1 ? k < ref1 : k > ref1; b = 0 <= ref1 ? ++k : --k) {
                bones.push(CASTRSet.fromXML(fbones.item(b)));
            }
            return this.set(time, dur, bones, morphs);
        };
        CASFrame.prototype.setFromBin = function (avdv) {
            var b, bones, m, morphs, nBones, nMorphs;
            nMorphs = avdv.nextUint();
            morphs = nMorphs === 0 ? null : (function () {
                var j, ref, results;
                results = [];
                for (m = j = 0, ref = nMorphs; 0 <= ref ? j < ref : j > ref; m = 0 <= ref ? ++j : --j) {
                    results.push(CASMorph.fromBin(avdv));
                }
                return results;
            })();
            nBones = avdv.nextUint();
            bones = (function () {
                var j, ref, results;
                results = [];
                for (b = j = 0, ref = nBones; 0 <= ref ? j < ref : j > ref; b = 0 <= ref ? ++j : --j) {
                    results.push(CASTRSet.fromBin(avdv));
                }
                return results;
            })();
            return this.set(-1, -1, bones, morphs);
        };
        CASFrame.prototype.set = function (time, dur, bones, morphs) {
            this.timeStamp = time;
            this.duration = dur;
            this.trSets = bones;
            this.morphs = morphs || CASMorph.NO_MORPHS;
            this.makeTRSetMap();
            return this.makeMorphMap();
        };
        CASFrame.prototype.getTime = function () {
            return this.timeStamp;
        };
        CASFrame.prototype.getDuration = function () {
            return this.duration;
        };
        CASFrame.prototype.getTRSets = function () {
            return this.trSets;
        };
        CASFrame.prototype.getMorphs = function () {
            return this.morphs;
        };
        CASFrame.prototype.getTRSet = function (bone4cc) {
            return this.trSetMap[bone4cc] || null;
        };
        CASFrame.prototype.getMorph = function (morph4cc) {
            return this.morphMap[morph4cc] || null;
        };
        CASFrame.prototype.setTime = function (ts) {
            return this.timeStamp = ts;
        };
        CASFrame.prototype.adjustTime = function (tadj) {
            return this.timeStamp += tadj;
        };
        CASFrame.prototype.setDuration = function (dur) {
            return this.duration = dur;
        };
        CASFrame.prototype.makeTRSetMap = function () {
            var NS, TRSETS, TRSMAP, i, j, ref, trs;
            TRSETS = this.trSets;
            NS = TRSETS.length;
            TRSMAP = [];
            for (i = j = 0, ref = NS; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                trs = TRSETS[i];
                TRSMAP[trs.getFourCC()] = trs;
            }
            return this.trSetMap = TRSMAP;
        };
        CASFrame.prototype.makeMorphMap = function () {
            var MORPHS, MPHMAP, NM, i, j, mph, ref;
            MORPHS = this.morphs;
            NM = MORPHS.length;
            MPHMAP = [];
            for (i = j = 0, ref = NM; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                mph = MORPHS[i];
                MPHMAP[mph.getFourCC()] = mph;
            }
            return this.morphMap = MPHMAP;
        };
        return CASFrame;
    })();
    cwaenv.add(CASFrame, "CASFrame");
}).call(this);