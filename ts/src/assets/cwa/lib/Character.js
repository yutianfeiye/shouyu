

//-------- js/Character.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var AmbientAnim, CASFrame, CASTRSet, Character, Config, Mesh, Skeleton, V3, console, cwaenv, document, log, setTimeout;
    cwaenv = this.getCWAEnv();
    console = this.console;
    document = this.document;
    setTimeout = this.setTimeout;
    log = console.log.bind(console);
    Config = cwaenv.get("Config");
    V3 = cwaenv.get("E3Vec");
    CASTRSet = cwaenv.get("CASTRSet");
    CASFrame = cwaenv.get("CASFrame");
    Skeleton = cwaenv.get("Skeleton");
    Mesh = cwaenv.get("Mesh");
    AmbientAnim = cwaenv.get("AmbientAnim");
    Character = (function () {
        function Character() {
            this.gl = null;
            this.avBase = "";
            this.readJSON = null;
            this.avatarName = "";
            this.volMin = null;
            this.volMax = null;
            this.meshes = [];
            this.defaultPose = null;
            this.skeleton = null;
            this.ambientAnim = null;
            this.textureFileName = "";
            this.jsonTextureURL = "";
            this.currentMorphs = [];
            this.scaleFromMetres = -1;
            this.USE_TRX_BONE_DATA = true;
            this.TEST_CPU_TRX_TO_MAT = false;
        }
        Character.STD_AVATAR_HEIGHT_METRES = 1.80;
        Character.STD_MAX_Y_METRES = 0.75;
        Character.prototype.loadJSON = function (gl, avatarName) {
            this.gl = gl;
            this.avatarName = avatarName;
            console.warn("Loading JSON avatar " + this.avatarName + " not supported");
            return null;
        };
        Character.prototype.loadJSONOrig = function (gl, avatarName) {
            var VER_3_DIG, jsnchrctr;
            this.gl = gl;
            this.avatarName = avatarName;
            this.avBase = Config.getAvBase(this.avatarName);
            this.readJSON = (function (_this) {
                return function (jfile) {
                    console.warn("Synchronous reading of JSON data not possible for " + _this.avBase + jfile);
                    return null;
                };
            })(this);
            jsnchrctr = this.readJSON("avdef.json");
            VER_3_DIG = Math.floor(100 * Number(jsnchrctr.version));
            if (VER_3_DIG < 310) {
                throw new Error("Avatar version " + VER_3_DIG + " is not viable!");
            }
            this.loadVolumeLimits(jsnchrctr);
            this.loadMeshes(jsnchrctr);
            this.loadInitPose(jsnchrctr);
            this.loadSkeleton(jsnchrctr);
            this.loadAmbientMotionDef(jsnchrctr);
            this.loadTextureData(jsnchrctr);
            this.setUpTextureFromJSON();
            this.setLengthScaleFactor();
            this.setUpMeshesForGL();
            return void 0;
        };
        Character.prototype.loadBinary = function (gl, avatarName, avdv) {
            var VER_3_DIG, version;
            this.gl = gl;
            this.avatarName = avatarName;
            version = avdv.nextStr();
            VER_3_DIG = Math.floor(100 * Number(version));
            if (VER_3_DIG < 310) {
                throw new Error("(Binary) Avatar version " + VER_3_DIG + " is not viable!");
            }
            this.scale = avdv.nextFloat();
            this.loadVolumeLimitsBin(avdv);
            this.setLengthScaleFactor();

            this.matRefl = avdv.nextVec3();
            this.skelYOffset = avdv.nextFloat();

            this.loadMeshesBin(avdv);
            this.loadInitPoseBin(avdv);
            this.loadSkeletonBin(avdv);
            this.loadAmbientMotionDefBin(avdv);
            this.loadTextureDataBin(avdv);
            this.setUpTextureFromAvDV(avdv);
            this.setUpMeshes();
            return void 0;
        };
        Character.prototype.bindForGL = function (gl) {
            this.gl = gl;
            this.bindTextures();
            return this.setUpMeshesForGL();
        };
        Character.prototype.release = function () {
            return this.releaseTextures();
        };
        Character.prototype.getDefaultPose = function () {
            return CASFrame.create(0, 40, this.defaultPose, null);
        };
        Character.prototype.getEmptyPose = function () {
            return CASFrame.create(0, 40, [], null);
        };
        Character.prototype.setUpTextureFromJSON = function () {
            var i, len, mesh, ref;
            ref = this.meshes;
            for (i = 0, len = ref.length; i < len; i++) {
                mesh = ref[i];
                mesh.createTextureFromJSON(this.jsonTextureURL);
            }
            return void 0;
        };
        Character.prototype.setUpTextureFromAvDV = function (avdv) {
            var i, len, mesh, ref;
            ref = this.meshes;
            for (i = 0, len = ref.length; i < len; i++) {
                mesh = ref[i];
                mesh.createTextureFromAvDV(avdv, this.textureFileName, this.mustFlip);
            }
            return void 0;
        };
        Character.prototype.bindTextures = function () {
            var i, len, mesh, ref;
            ref = this.meshes;
            for (i = 0, len = ref.length; i < len; i++) {
                mesh = ref[i];
                mesh.bindTextureForGL(this.textureFileName);
            }
            return void 0;
        };
        Character.prototype.releaseTextures = function () {
            var i, len, mesh, ref;
            ref = this.meshes;
            for (i = 0, len = ref.length; i < len; i++) {
                mesh = ref[i];
                mesh.releaseMesh(this.textureFileName);
            }
            return void 0;
        };
        Character.prototype.setUpMeshes = function () {
            var i, len, mesh, ref;
            ref = this.meshes;
            for (i = 0, len = ref.length; i < len; i++) {
                mesh = ref[i];
                mesh.prepareSkeleton(this.skeleton);
            }
            return void 0;
        };
        Character.prototype.setUpMeshesForGL = function () {
            var i, len, mesh, ref;
            ref = this.meshes;
            for (i = 0, len = ref.length; i < len; i++) {
                mesh = ref[i];
                mesh.prepareForGL(this.skeleton);
            }
            return void 0;
        };
        Character.prototype.loadVolumeLimits = function (jsnchrctr) {
            this.volMin = V3.fromVec(jsnchrctr.volMin);
            this.volMax = V3.fromVec(jsnchrctr.volMax);
        };
        Character.prototype.loadVolumeLimitsBin = function (avdv) {
            this.volMin = V3.fromVec(avdv.nextVec3());
            this.volMax = V3.fromVec(avdv.nextVec3());
        };
        Character.prototype.loadMeshes = function (jsnchrctr) {
            this.meshes = jsnchrctr.meshes.map((function (_this) {
                return function (mfname) {
                    var mesh;
                    mesh = new Mesh(_this.gl, _this.USE_TRX_BONE_DATA, _this.TEST_CPU_TRX_TO_MAT);
                    mesh.setFromJSON(_this.readJSON(mfname));
                    return mesh;
                };
            })(this));
            return void 0;
        };
        Character.prototype.loadMeshesBin = function (avdv) {
            var i, nMeshes, results;
            nMeshes = avdv.nextUint();
            this.meshes = (function () {
                results = [];
                for (var i = 0; 0 <= nMeshes ? i < nMeshes : i > nMeshes; 0 <= nMeshes ? i++ : i--) {
                    results.push(i);
                }
                return results;
            }).apply(this).map((function (_this) {
                return function () {
                    var mesh;
                    mesh = new Mesh(_this.gl, _this.USE_TRX_BONE_DATA, _this.TEST_CPU_TRX_TO_MAT);
                    mesh.setFromBin(avdv);
                    return mesh;
                };
            })(this));
            return void 0;
        };
        Character.prototype.loadInitPose = function (jsnchrctr) {
            return this.defaultPose = jsnchrctr.initPose.map(CASTRSet.fromJSON);
        };
        Character.prototype.loadInitPoseBin = function (avdv) {
            var b, nInitPose;
            nInitPose = avdv.nextUint();
            return this.defaultPose = (function () {
                var i, ref, results;
                results = [];
                for (b = i = 0, ref = nInitPose; 0 <= ref ? i < ref : i > ref; b = 0 <= ref ? ++i : --i) {
                    results.push(CASTRSet.fromBin(avdv));
                }
                return results;
            })();
        };
        Character.prototype.loadSkeleton = function (jsnchrctr) {
            return this.skeleton = Skeleton.create(jsnchrctr.skelBones, this.USE_TRX_BONE_DATA, this.TEST_CPU_TRX_TO_MAT);
        };
        Character.prototype.loadSkeletonBin = function (avdv) {
            return this.skeleton = Skeleton.fromBin(avdv, this.USE_TRX_BONE_DATA, this.TEST_CPU_TRX_TO_MAT);
        };
        Character.prototype.loadAmbientMotionDef = function (jsnchrctr) {
            var amfrms, jsnamb;
            amfrms = null;
            if (jsnchrctr.ambientFrames) {
                amfrms = jsnchrctr.ambientFrames.map(CASFrame.fromJSON);
            } else if (jsnchrctr.ambientFileName) {
                jsnamb = this.readJSON(jsnchrctr.ambientFileName);
                amfrms = jsnamb.ambientFrames.map(CASFrame.fromJSON);
            }
            this.ambientAnim = !amfrms ? null : AmbientAnim.create(amfrms, jsnchrctr.ambientFPS);
            return void 0;
        };
        Character.prototype.loadAmbientMotionDefBin = function (avdv) {
            var ambFPS, f, frame, frames, i, len, nAmbFrames, t, tNxt;
            this.ambientAnim = null;
            nAmbFrames = avdv.nextUint();
            if (nAmbFrames !== 0) {
                ambFPS = avdv.nextFloat();
                frames = (function () {
                    var i, ref, results;
                    results = [];
                    for (f = i = 0, ref = nAmbFrames; 0 <= ref ? i < ref : i > ref; f = 0 <= ref ? ++i : --i) {
                        results.push(CASFrame.fromBin(avdv));
                    }
                    return results;
                })();
                t = 0;
                for (f = i = 0, len = frames.length; i < len; f = ++i) {
                    frame = frames[f];
                    tNxt = (f + 1) * 1000 / ambFPS;
                    frame.setTime(t);
                    frame.setDuration(tNxt - t);
                    t = tNxt;
                }
                this.ambientAnim = AmbientAnim.create(frames, ambFPS);
            }
            return void 0;
        };
        Character.prototype.loadTextureData = function (jsnchrctr) {
            this.textureFileName = jsnchrctr.textureFileName;
            return this.jsonTextureURL = "" + this.avBase + this.textureFileName;
        };
        Character.prototype.loadTextureDataBin = function (avdv) {
            var j;
            this.textureFileName = avdv.nextStr();
            this.textureFlags = (function () {
                var i, results;
                results = [];
                for (j = i = 0; i < 12; j = ++i) {
                    results.push(avdv.nextBool());
                }
                return results;
            })();
            return this.mustFlip = !this.textureFlags[5];
        };
        Character.prototype.setLengthScaleFactor = function () {
            return this.scaleFromMetres = ((this.volMax.y()) - (this.volMin.y())) / Character.STD_AVATAR_HEIGHT_METRES;
        };
        Character.prototype.getName = function () {
            return this.avatarName;
        };
        Character.prototype.getAmbientFrames = function () {
            var amb;
            amb = this.ambientAnim;
            if (amb) {
                return amb.getAmbientFrames();
            } else {
                return [this.getEmptyPose()];
            }
        };
        Character.prototype.getMetresToInternal = function () {
            return this.scaleFromMetres;
        };
        Character.prototype.getAdjustViewY = function () {
            var max_y_metres;
            max_y_metres = (this.volMax.y()) / this.scaleFromMetres;
            return max_y_metres - Character.STD_MAX_Y_METRES;
        };
        Character.prototype.setFrame = function (frame) {
            this.skeleton.setBones(frame.getTRSets());
            return this.currentMorphs = frame.getMorphs();
        };
        Character.prototype.draw = function (x, y, z, viewMatrix, projMatrix) {
            var mesh;
            mesh = this.meshes[0];
            mesh.draw(this.skeleton, this.currentMorphs, x, y, z, viewMatrix, projMatrix);
            return void 0;
        };
        return Character;
    })();
    cwaenv.add(Character, "Character");
}).call(this);