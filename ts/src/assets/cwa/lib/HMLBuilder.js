//-------- js/HMLBuilder.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var Data, Defs, HMLBuilder, cwaenv, document, logLev;
    cwaenv = this.getCWAEnv();
    document = this.document;
    Data = cwaenv.get("Data");
    Defs = cwaenv.get("HNSDefs");
    logLev = 0;
    HMLBuilder = (function () {
        function HMLBuilder() {
            this.doc = Data.toDOM("<sign/>");
            HMLBuilder.trace("SiGML document created");
        }
        HMLBuilder.prototype.newHMLElement = function (tag) {
            HMLBuilder.trace("HML: newHMLElement(" + tag + ")");
            return this.doc.createElement(tag);
        };
        HMLBuilder.prototype.wrapperEl = function (tag, inner) {
            var wel;
            HMLBuilder.trace("HML: wrapperEl(" + tag + ")");
            wel = this.newHMLElement(tag);
            wel.appendChild(inner);
            return wel;
        };
        HMLBuilder.prototype.wrapPair = function (tag, inner0, inner1) {
            var wel;
            HMLBuilder.trace("HML: wrapPair(" + tag + ")");
            wel = this.wrapperEl(tag, inner0);
            wel.appendChild(inner1);
            return wel;
        };
        HMLBuilder.prototype.wrapIfNeeded = function (tag, el) {
            var elIsOK;
            elIsOK = el.tagName === tag && !(el.hasAttributes());
            HMLBuilder.trace("HML: wrapIfNeeded(" + tag + ") Needed is " + elIsOK);
            if (elIsOK) {
                return el;
            } else {
                return this.wrapperEl(tag, el);
            }
        };
        HMLBuilder.prototype.stripParentIfNotNeeded = function (el) {
            var child, res;
            HMLBuilder.trace("HML: stripParentIfNotNeeded");
            res = el;
            child = el.firstChild;
            if (el.tagName === (child != null ? child.tagName : void 0) && !(el.hasAttributes())) {
                HMLBuilder.trace("HML: stripParentIfNotNeeded removing child");
                res = el.removeChild(child);
            }
            return res;
        };
        HMLBuilder.prototype.elementFromList = function (al, etag) {
            var e, elmem, i, ix, len;
            HMLBuilder.trace("HML: elementFromList " + etag + " length " + al.length);
            if (al.length === 1) {
                return al[0];
            } else {
                e = this.newHMLElement(etag);
                for (ix = i = 0, len = al.length; i < len; ix = ++i) {
                    elmem = al[ix];
                    HMLBuilder.trace("HML: elementFromList " + etag + " append child " + ix + " " + elmem.tagName);
                    e.appendChild(elmem);
                }
                return e;
            }
        };
        HMLBuilder.prototype.rootEl = function (inner) {
            this.doc.documentElement.appendChild(inner);
            return this.doc;
        };
        HMLBuilder.prototype.appendChildList = function (el, chl) {
            var chlel, i, len, results;
            results = [];
            for (i = 0, len = chl.length; i < len; i++) {
                chlel = chl[i];
                results.push(this.checkedAppendChild(el, chlel));
            }
            return results;
        };
        HMLBuilder.prototype.checkedAppendChildList = function (el, chl) {
            if (chl != null) {
                return this.appendChildList(el, chl);
            }
        };
        HMLBuilder.prototype.checkedAppendChild = function (el, ch) {
            if (ch != null) {
                return el.appendChild(ch);
            }
        };
        HMLBuilder.prototype.checkedSetAttr = function (el, aname, aval) {
            if (aval != null) {
                HMLBuilder.trace("HML: checkedSetAttr: " + aname + " set to " + aval);
                return el.setAttribute(aname, aval);
            } else {
                return HMLBuilder.trace("HML: checkedSetAttr: " + aname + " not set");
            }
        };
        HMLBuilder.prototype.checkedSetFlagAttr = function (el, aname, flagIsTrue) {
            if (flagIsTrue) {
                return el.setAttribute(aname, "true");
            }
        };
        HMLBuilder.prototype.checkedStringSetFlagAttr = function (el, aname, aval) {
            if (aval === "true") {
                HMLBuilder.trace("HML: checkedStringSetFlagAttr: " + aname + " set to true");
                return el.setAttribute(aname, "true");
            } else {
                return HMLBuilder.trace("HML: checkedStringSetFlagAttr: " + aname + " not set for " + aval);
            }
        };
        HMLBuilder.prototype.insertNonManual = function (signel, nmstr) {
            var aid, aval, chEl, childtag, fullnmtag, i, len, nmEl, ref;
            HMLBuilder.trace("HML: insertNonManual: \"" + nmstr + "\"");
            if (nmstr.length > 0) {
                HMLBuilder.trace("NM: <" + Defs.HNS_NONMAN_TAG + ">");
                nmEl = this.newHMLElement(Defs.HNS_NONMAN_TAG);
                ref = nmstr.split(/\s+/);
                for (i = 0, len = ref.length; i < len; i++) {
                    fullnmtag = ref[i];
                    childtag = this._hnsNMElementTag(fullnmtag);
                    aid = this._hnsNMAttrName(fullnmtag);
                    aval = this._hnsNMAttrValueFull(fullnmtag);
                    HMLBuilder.trace("NM: <" + childtag + " " + aid + "=\"" + aval + "\"/>");
                    chEl = this.newHMLElement(childtag);
                    this.checkedSetAttr(chEl, aid, aval);
                    this.checkedAppendChild(nmEl, chEl);
                }
                HMLBuilder.trace("NM: </" + Defs.HNS_NONMAN_TAG + ">");
                signel.insertBefore(nmEl, signel.firstChild);
                return HMLBuilder.trace("NM: Inserted");
            }
        };
        HMLBuilder.prototype._hnsNMElementTag = function (nmtag) {
            var ID, ei, hnseltag, mgi, nmi, t;
            t = (nmtag.charAt(0)).toLowerCase();
            if (t === Defs.MOUTH_PICTURE_LETTER) {
                return Defs.HNS_MOUTHPICTURE_TAG;
            } else {
                mgi = Defs.MOUTH_GESTURE_LETTERS.indexOf(t);
                if (0 <= mgi) {
                    hnseltag = Defs.HNS_MOUTHGESTURE_TAG;
                } else {
                    nmi = Defs.NON_MOUTH_RELATED_LETTERS.indexOf(t);
                    if (0 <= nmi) {
                        hnseltag = Defs.NON_MOUTH_RELATED_HML_TAGS[nmi];
                        if (hnseltag === null) {
                            ID = (nmtag.substring(1)).toUpperCase();
                            ei = 0;
                            while (ei < Defs.EYES_TAG_LISTS.length && (Defs.EYES_TAG_LISTS[ei].indexOf(ID)) < 0) {
                                ei++;
                            }
                            if (ei < Defs.EYES_TAG_LISTS.length) {
                                hnseltag = Defs.EYE_RELATED_HML_TAGS[ei];
                            } else {
                                hnseltag = Defs.HNS_EXTRA_TAG;
                            }
                        }
                    } else {
                        hnseltag = Defs.HNS_EXTRA_TAG;
                    }
                }
                return hnseltag;
            }
        };
        HMLBuilder.prototype._hnsNMAttrName = function (nmtag) {
            var tagLetter;
            tagLetter = (nmtag.charAt(0)).toLowerCase();
            if (tagLetter === Defs.MOUTH_PICTURE_LETTER) {
                return Defs.PICTURE_ATTR;
            } else {
                return Defs.TAG_ATTR;
            }
        };
        HMLBuilder.prototype._hnsNMAttrValueFull = function (nmtag) {
            var htail, htailU, tlL, tlU;
            tlL = (nmtag.charAt(0)).toLowerCase();
            tlU = tlL.toUpperCase();
            htail = nmtag.substring(1);
            htailU = tlL === Defs.MOUTH_PICTURE_LETTER ? null : htail.toUpperCase();
            if (tlL === Defs.MOUTH_PICTURE_LETTER) {
                return htail;
            } else if (0 <= Defs.MOUTH_GESTURE_LETTERS.indexOf(tlL)) {
                return "" + tlU + htailU;
            } else if (0 <= Defs.NON_MOUTH_RELATED_LETTERS.indexOf(tlL)) {
                return htailU;
            } else {
                return "" + tlU + htailU;
            }
        };
        HMLBuilder.prototype._xmlAttrValueString = function (aval) {
            var abuf, ch, i, len, xs;
            abuf = "";
            for (i = 0, len = aval.length; i < len; i++) {
                ch = aval[i];
                xs = Defs.xmlSpecials.indexOf(ch);
                abuf += xs < 0 ? ch : Defs.xmlEscapes[xs];
            }
            return abuf;
        };
        HMLBuilder.setLogLevel = function (lev) {
            return logLev = lev;
        };
        HMLBuilder.trace = function (str) {
            if (logLev >= 440) {
                return console.log(str);
            }
        };
        return HMLBuilder;
    })();
    cwaenv.add(HMLBuilder, "HMLBuilder");
}).call(this);