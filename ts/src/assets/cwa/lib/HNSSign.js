
//-------- js/HNSSign.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var Defs, HNSSign, Node, cwaenv, logLev;
    cwaenv = this.getCWAEnv();
    Node = cwaenv.get("Node");
    Defs = cwaenv.get("HNSDefs");
    logLev = 0;
    HNSSign = (function () {
        function HNSSign(hnsEl, lev) {
            this.hnsEl = hnsEl;
            if (lev != null) {
                logLev = lev;
            }
            this.hnsMan = "";
            this.hnsNonMan = "";
            this.hnsGloss = null;
            this.hnsDuration = null;
            this.hnsSpeed = null;
            this.hnsTimeScale = null;
            this.hnsSignElText = null;
            this.hnsErr = null;
            HNSSign.trace("HNS Sign object created");
            this.scanRoot();
            HNSSign.trace("Gloss:     [" + this.hnsGloss + "]");
            HNSSign.trace("Manual:    [" + this.hnsMan + "]");
            HNSSign.trace("Nonmanual: [" + this.hnsNonMan + "]");
        }
        HNSSign.prototype.scanRoot = function () {
            var ref, ref1, ref2, ref3;
            HNSSign.trace("Root Name " + this.hnsEl.nodeName);
            if (this.hnsEl.nodeName === "hns_sign") {
                this.hnsGloss = (ref = this.hnsEl.attributes.getNamedItem("gloss")) != null ? ref.value : void 0;
                this.hnsDuration = (ref1 = this.hnsEl.attributes.getNamedItem("duration")) != null ? ref1.value : void 0;
                this.hnsSpeed = (ref2 = this.hnsEl.attributes.getNamedItem("speed")) != null ? ref2.value : void 0;
                this.hnsTimeScale = (ref3 = this.hnsEl.attributes.getNamedItem("timescale")) != null ? ref3.value : void 0;
                return this._scanSign(this.hnsEl);
            }
        };
        HNSSign.prototype._scanSign = function (el) {
            var i, len, nd, ref, results;
            ref = el.childNodes;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                nd = ref[i];
                HNSSign.trace("Sign Name " + nd.nodeName);
                if (nd.nodeName === "hamnosys_manual") {
                    results.push(this._scanMan(nd));
                } else if (nd.nodeName === "hamnosys_nonmanual") {
                    results.push(this._scanNonMan(nd));
                } else {
                    results.push(void 0);
                }
            }
            return results;
        };
        HNSSign.prototype._scanMan = function (el) {
            var hamVal, i, len, nd, ref, results;
            ref = el.childNodes;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                nd = ref[i];
                if (!(nd.nodeType === Node.ELEMENT_NODE)) {
                    continue;
                }
                hamVal = Defs.hamMap[nd.nodeName];
                if (hamVal != null) {
                    HNSSign.trace("Man Element Name " + nd.nodeName + "=" + (hamVal.charCodeAt(0)));
                    this.hnsMan += hamVal;
                } else {
                    console.warn("Manual Element not recognised: " + nd.nodeName);
                }
                results.push(this._scanMan(nd));
            }
            return results;
        };
        HNSSign.prototype._nonManVal = function (el) {
            var currTag, i, ix, j, k, len, len1, len2, newTok, ref, ref1, tagMatch, tagVal, tags, testTag, theTag, tok;
            theTag = el.tagName;
            if (theTag === Defs.HNS_MOUTHPICTURE_TAG) {
                tok = Defs.MOUTH_PICTURE_LETTER + el.getAttribute(Defs.PICTURE_ATTR);
            } else {
                tagVal = el.getAttribute(Defs.TAG_ATTR);
                if (theTag === Defs.HNS_MOUTHGESTURE_TAG) {
                    tok = tagVal;
                } else {
                    tok = "";
                    tags = (tagVal.replace(/\s/g, "")).split("|");
                    for (i = 0, len = tags.length; i < len; i++) {
                        currTag = tags[i];
                        tagMatch = -1;
                        ref = Defs.EYE_RELATED_HML_TAGS;
                        for (ix = j = 0, len1 = ref.length; j < len1; ix = ++j) {
                            testTag = ref[ix];
                            if (theTag === testTag) {
                                tagMatch = ix;
                            }
                        }
                        if (tagMatch >= 0) {
                            newTok = Defs.EYES_LETTER + currTag;
                        } else {
                            ref1 = Defs.NON_MOUTH_RELATED_HML_TAGS;
                            for (ix = k = 0, len2 = ref1.length; k < len2; ix = ++k) {
                                testTag = ref1[ix];
                                if (theTag === testTag) {
                                    tagMatch = ix;
                                }
                            }
                            if (tagMatch >= 0) {
                                newTok = (Defs.NON_MOUTH_RELATED_LETTERS.charAt(tagMatch)) + currTag;
                            } else {
                                newTok = currTag;
                            }
                        }
                        tok = (tok === "" ? "" : tok + " ") + newTok;
                    }
                }
            }
            return tok;
        };
        HNSSign.prototype._scanNonMan = function (el) {
            var hamVal, i, len, nd, ref, results;
            ref = el.childNodes;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
                nd = ref[i];
                if (!(nd.nodeType === Node.ELEMENT_NODE)) {
                    continue;
                }
                hamVal = this._nonManVal(nd);
                HNSSign.trace("NonMan Element Name " + nd.nodeName + ": " + hamVal);
                if (this.hnsNonMan.length > 0) {
                    this.hnsNonMan += " ";
                }
                this.hnsNonMan += hamVal;
                results.push(this._scanNonMan(nd));
            }
            return results;
        };
        HNSSign.prototype.man = function () {
            return this.hnsMan;
        };
        HNSSign.prototype.nonman = function () {
            return this.hnsNonMan;
        };
        HNSSign.prototype.gloss = function () {
            return this.hnsGloss;
        };
        HNSSign.prototype.duration = function () {
            return this.hnsDuration;
        };
        HNSSign.prototype.speed = function () {
            return this.hnsSpeed;
        };
        HNSSign.prototype.timeScale = function () {
            return this.hnsTimeScale;
        };
        HNSSign.setLogLevel = function (lev) {
            return logLev = lev;
        };
        HNSSign.trace = function (str) {
            if (logLev >= 440) {
                return console.log(str);
            }
        };
        return HNSSign;
    })();
    cwaenv.add(HNSSign, "HNSSign");
}).call(this);