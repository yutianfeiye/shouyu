//-------- js/SToCAObj.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var Env, SToCAObj, alert, console, cwaenv, document, log, navigator, setTimeout, status, theSToCA,
        bind = function (fn, me) {
            return function () {
                return fn.apply(me, arguments);
            };
        };
    cwaenv = this.getCWAEnv();
    console = this.console;
    document = this.document;
    setTimeout = this.setTimeout;
    navigator = this.navigator;
    status = this.status;
    alert = this.alert;
    Env = cwaenv.get("CWAEnv");
    log = console.log.bind(console);
    SToCAObj = (function () {
        function SToCAObj() {
            this.stat = bind(this.stat, this);
            this.RETURN_CHAR = 13;
            this.sLimit = 0;
            this.fLimit = 0;
            this.sign = -1;
            this.gloss = "";
            this.signMsg = "";
            this.curAvatar = "anna";
            this.curFPS = "50";
            this.stocCB = {};
            this.stocApplet = null;
        }
        SToCAObj.prototype.findSToCA = function () {
            var ref;
            return (ref = document.getElementsByClassName("stocApplet")) != null ? ref[0] : void 0;
        };
        SToCAObj.prototype.appletLoadIsStable = function () {
            var appini, applet;
            applet = this.findSToCA();
            appini = applet != null ? applet.init : void 0;
            log("appletLoadIsStable: applet=" + (typeof applet) + " applet.init=" + (typeof (applet != null ? applet.init : void 0)));
            return ((typeof applet) !== "undefined") && ((typeof applet.init) !== "undefined");
        };
        SToCAObj.prototype.setSToCA = function (stoca, source) {
            log("setSToCA() source: " + source);
            return this.stocApplet = stoca;
        };
        SToCAObj.prototype.initialise = function () {
            this.synchronousInit();
            if (Env.hasJava) {
                this.initSToCApplet();
            }
            return void 0;
        };
        SToCAObj.prototype.synchronousInit = function () {
            return this.resetSToCAData();
        };
        SToCAObj.prototype.initSToCApplet = function () {
            if (this.appletLoadIsStable()) {
                return this.setSToCA(this.findSToCA(), "initSToCApplet()");
            } else {
                return this.asynchGetSToCA();
            }
        };
        SToCAObj.prototype.asynchGetSToCA = function () {
            var done, stoca, tryFindSToCA;
            stoca = void 0;
            tryFindSToCA = (function (_this) {
                return function () {
                    if (_this.appletLoadIsStable()) {
                        stoca = _this.findSToCA();
                        return _this.setSToCA(stoca, "asynchGetSToCA()");
                    }
                };
            })(this);
            done = (function (_this) {
                return function () {
                    return Boolean(stoca);
                };
            })(this);
            return this.asynchRepeat(tryFindSToCA, done, "asynchGetSToCA(): ", 200, 30000);
        };
        SToCAObj.prototype.terminate = function () {
            var ref;
            if ((ref = this.getSToCA()) != null) {
                ref.terminate();
            }
            return this.stat("SToCA: SiGML-to-CAS Applet terminated");
        };
        SToCAObj.prototype.getSToCA = function () {
            if (this.stocApplet === null && Env.hasJava) {
                log("Late attempt to find SToCA ...");
                if (this.appletLoadIsStable()) {
                    this.setSToCA(this.findSToCA(), "getSToCA()");
                } else {
                    log("getSToCA(): catastrophe -- cannot get SToCA!.");
                }
            }
            return this.stocApplet;
        };
        SToCAObj.prototype.asynchRepeat = function (body, ok, tag, delay, maxdelay) {
            var closedARFun, n;
            n = 0;
            closedARFun = function () {
                body();
                if (ok()) {
                    if (tag) {
                        return log(tag + " completed delay=" + n);
                    }
                } else {
                    n += delay;
                    if (n < maxdelay) {
                        return setTimeout(closedARFun, delay);
                    } else {
                        return log(tag + " abandoned delay=" + n);
                    }
                }
            };
            return closedARFun();
        };
        SToCAObj.prototype.resetSignData = function () {
            this.sLimit = this.fLimit = 0;
            this.sign = -1;
            this.gloss = "";
            return this.signMsg = "";
        };
        SToCAObj.prototype.resetSToCAData = function () {
            this.resetSignData();
            this.curAvatar = "anna";
            return this.curFPS = "50";
        };
        SToCAObj.prototype.htmlEls = function (elid) {
            return document.getElementsByClassName(elid);
        };
        SToCAObj.prototype.stat = function (msg) {
            var i, len, statels, stel;
            log(msg);
            statels = this.htmlEls("statusExtra");
            for (i = 0, len = statels.length; i < len; i++) {
                stel = statels[i];
                stel.value = msg;
            }
            return status = msg;
        };
        SToCAObj.prototype.framesGenEH = function (ekind, nf, ns) {
            var ekinds, msg, prevFLimit;
            msg = "No frames generated from URL.";
            ekinds = String(ekind);
            prevFLimit = -1;
            if (ekinds === "LOAD_FRAMES_START") {
                this.resetSignData();
                msg = "Loading of frames has started.";
            } else if (ekinds === "LOADED_NEXT_SIGN") {
                prevFLimit = this.fLimit;
                this.fLimit = nf;
                this.sLimit = ns;
                if (prevFLimit === 0 && this.fLimit !== 0) {
                    this.setButtonsForPlaying();
                    msg = ns + " sign(s) now ready to play.";
                }
            } else if (ekinds === "LOAD_FRAMES_DONE_OK") {
                prevFLimit = this.fLimit;
                this.fLimit = nf;
                this.sLimit = ns;
                if (this.fLimit === 0) {
                    this.setButtonsForIdling();
                } else if (prevFLimit === 0) {
                    msg = "Ready to play.";
                } else {
                    msg = "All frames loaded: " + this.sLimit + " signs, " + this.fLimit + " frames.";
                }
            } else if (ekinds === "LOAD_FRAMES_DONE_BAD") {} else {
                msg = "unknown frames-gen event: " + ekind + ".";
                alert(msg);
            }
            return this.stat(msg);
        };
        SToCAObj.prototype.setAvatar = function (av) {
            return this.curAvatar = String(av);
        };
        SToCAObj.prototype.setFPS = function (fps) {
            return this.curFPS = String(fps);
        };
        SToCAObj.prototype.doSiGMLURLToCAS = function (rqstid, surl, av, casfmt, cascb) {
            var SToCA;
            if (surl.length === 0) {
                log("Ignoring zero-length SiGML URL.");
                return setTimeout((function () {
                    return cascb(null);
                }), 0);
            } else {
                if (SToCA = this.getSToCA()) {
                    this.stocCB[rqstid] = cascb;
                    return SToCA.doSiGMLURLToCAS(rqstid, surl, av, casfmt);
                } else {
                    return this.stat("No SToCA for SiGML URL to CAS");
                }
            }
        };
        SToCAObj.prototype.doSiGMLTextToCAS = function (rqstid, stxt, av, casfmt, cascb) {
            var SToCA;
            if (SToCA = this.getSToCA()) {
                this.stocCB[rqstid] = cascb;
                return SToCA.doSiGMLTextToCAS(rqstid, stxt, av, casfmt);
            } else {
                return this.stat("No SToCA for SiGML Text to CAS");
            }
        };
        SToCAObj.prototype.returnCAS = function (rqstid, cas) {
            var cascb, err;
            cascb = this.stocCB[rqstid];
            if (!cascb) {
                log("SToCA.returnCAS(), id=" + rqstid + ": call-back is missing.");
            } else {
                try {
                    cascb(cas);
                } catch (error) {
                    err = error;
                    log(err.stack || err.stacktrace || err);
                }
            }
            return void 0;
        };
        SToCAObj.prototype.setDoneSiGMLToCASRequest = function (rqstid) {
            if (this.stocCB[rqstid]) {
                return delete this.stocCB[rqstid];
            } else {
                return log("SToCA.setDoneSiGMLToCASRequest(), id " + rqstid + " is invalid.");
            }
        };
        SToCAObj.prototype.setLogFlag = function (lstr) {
            var logstr, ref;
            logstr = lstr || "true";
            return (ref = this.getSToCA()) != null ? ref.switchLogEnabled(logstr) : void 0;
        };
        return SToCAObj;
    })();
    theSToCA = new SToCAObj;
    cwaenv.add(theSToCA, "theSToCA");
    this.stocaFramesGenEvent = function (ekind, nf, ns) {
        return theSToCA.framesGenEH(ekind, nf, ns);
    };
    this.stocaReturnCAS = function (rqstid, cas) {
        return theSToCA.returnCAS(rqstid, cas);
    };
    this.spaSetSToCApplet = function (spa) {
        return log("spaSetSToCApplet called with spa=" + spa);
    };
}).call(this);