//-------- js/CASAnimation.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var CASAnimation, CASFrame, Data, console, cwaenv, document, log, setTimeout;
    cwaenv = this.getCWAEnv();
    console = this.console;
    document = this.document;
    setTimeout = this.setTimeout;
    log = console.log.bind(console);
    Data = cwaenv.get("Data");
    CASFrame = cwaenv.get("CASFrame");
    CASAnimation = (function () {
        function CASAnimation() {
            this.initAnimation();
        }
        CASAnimation.fromFrames = function (frames) {
            var anim;
            anim = new CASAnimation;
            anim.setFromFrames(frames);
            return anim;
        };
        CASAnimation.fromCASDOM = function (casdoc) {
            var ELEMENT_TYPE, NF, NS, anim, casel, doCheckSigns, f, fel, fhi, flo, framesSegment, frmels, glossStr, i, j, k, len, len1, len2, s, sd, signdesc, signdescs, ssel, ssels;
            ELEMENT_TYPE = 1;
            anim = new CASAnimation;
            if (casdoc) {
                casel = casdoc.documentElement();
                frmels = casel.getElementsByTagName("frame");
                NF = frmels.length || 0;
                framesSegment = function (flo, fhi) {
                    var f, frames, i, ref, ref1;
                    frames = [];
                    for (f = i = ref = flo, ref1 = fhi; ref <= ref1 ? i <= ref1 : i >= ref1; f = ref <= ref1 ? ++i : --i) {
                        frames.push(CASFrame.fromXML(frmels[f]));
                    }
                    return frames;
                };
                ssels = casel.getElementsByTagName("signStart");
                NS = ssels.length || 0;
                if (NS === 0) {
                    anim.setFromFrames(framesSegment(0, NF));
                } else {
                    signdescs = [];
                    f = 0;
                    for (s = i = 0, len = ssels.length; i < len; s = ++i) {
                        ssel = ssels[s];
                        glossStr = ssel.getAttribute("gloss");
                        fel = ssel.nextSibling;
                        while (fel && fel.nodeType !== ELEMENT_TYPE) {
                            fel = fel.nextSibling;
                        }
                        if (fel && fel.nodeName === "frame") {
                            f = Number(fel.getAttribute("index"));
                        }
                        signdescs.push({
                            i: s,
                            gloss: glossStr,
                            fLo: f
                        });
                    }
                    for (s = j = 0, len1 = signdescs.length; j < len1; s = ++j) {
                        signdesc = signdescs[s];
                        flo = signdesc.fLo;
                        fhi = s + 1 === NS ? NF : signdescs[s + 1].fLo;
                        signdesc.frames = framesSegment(flo, fhi);
                        anim.extendSigns(signdesc);
                    }
                    doCheckSigns = false;
                    if (doCheckSigns) {
                        for (s = k = 0, len2 = signdescs.length; k < len2; s = ++k) {
                            sd = signdescs[s];
                            log(("Sign " + sd.i + ", " + sd.gloss + ": fLo=" + sd.fLo + " ") + ("#frames=" + sd.frames.length + "."));
                        }
                    }
                }
                log("CAS animation:  #signs=" + (anim.countSigns()) + ".");
            }
            return anim;
        };
        CASAnimation.fromCASFile = function (casfile) {
            console.warn("fromCASFile: Not implemented");
            return void 0;
        };
        CASAnimation.fromCASText = function (casxmltxt) {
            var casanim, casdoc, report;
            casdoc = Data.toDOM(casxmltxt);
            casanim = CASAnimation.fromCASDOM(casdoc);
            log(report = casanim.hasFrames() ? "CAS frames #=" + (casanim.countFrames()) : "CAS XML text is invalid.");
            return casanim;
        };
        CASAnimation.prototype.initAnimation = function () {
            this.signs = [];
            this.frames = [];
            this.isComplete = false;
            this.fCount = 0;
            this.tLimit = 0;
            this.signNew = null;
            this.frameCur = null;
            return this.fCur = 0;
        };
        CASAnimation.prototype.extendSigns = function (signdesc) {
            var NS, f, fhi, flo, i, len, sframes;
            NS = this.signs.length;
            sframes = signdesc.frames;
            flo = this.fCount;
            fhi = flo + sframes.length;
            this.signNew = {
                i: NS,
                gloss: signdesc.gloss,
                fLo: flo,
                fHi: fhi
            };
            this.signs.push(this.signNew);
            for (i = 0, len = sframes.length; i < len; i++) {
                f = sframes[i];
                f.sign = this.signNew;
                this.frames.push(f);
                this.fCount++;
            }
            this.setTimeLimit();
            if (NS === 0) {
                this.reset();
            }
            return void 0;
        };
        CASAnimation.prototype.setCompleted = function () {
            return this.isComplete = true;
        };
        CASAnimation.prototype.setFromFrames = function (frames) {
            var signdesc;
            if (frames != null ? frames.length : void 0) {
                signdesc = {
                    i: 0,
                    gloss: "ALL_FRAMES",
                    frames: frames
                };
                this.extendSigns(signdesc);
                this.setCompleted();
            } else {
                log("JASAnimData.setFromFrames(): empty frames list.");
            }
            return void 0;
        };
        CASAnimation.prototype.setTimeLimit = function () {
            var lastframe;
            if (this.fCount === 0) {
                return this.tLimit = 0;
            } else {
                lastframe = this.frameAt(this.fCount - 1);
                return this.tLimit = (lastframe.getTime()) + (lastframe.getDuration());
            }
        };
        CASAnimation.prototype.reset = function () {
            return this.setFrameAt(0);
        };
        CASAnimation.prototype.hasFrames = function () {
            return this.fCount !== 0;
        };
        CASAnimation.prototype.countFrames = function () {
            return this.fCount;
        };
        CASAnimation.prototype.countSigns = function () {
            return this.signs.length;
        };
        CASAnimation.prototype.frameAt = function (f) {
            return this.frames[f];
        };
        CASAnimation.prototype.setFrameAt = function (f) {
            this.fCur = f;
            return this.frameCur = this.frameAt(f);
        };
        CASAnimation.prototype.getFrameIndex = function (t, NF) {
            var f, ff, frm, tfrm;
            f = this.fCur;
            ff = NF;
            while (f !== ff) {
                frm = this.setFrameAt(f);
                tfrm = frm.getTime();
                if (t < tfrm + frm.getDuration()) {
                    ff = f;
                } else {
                    f += 1;
                }
            }
            return f;
        };
        CASAnimation.prototype.getSignAndFrameInfo = function () {
            if (this.fCur === this.fCount) {
                return ["[none]", this.signs.length, this.fCur];
            } else {
                return [this.frameCur.sign.gloss, this.frameCur.sign.i, this.fCur];
            }
        };
        CASAnimation.prototype.getFrame = function (t) {
            var NF, f, frame, resolved, was_complete;
            resolved = false;
            while (!resolved) {
                was_complete = this.isComplete;
                NF = this.fCount;
                f = this.getFrameIndex(t, NF);
                resolved = f !== NF || was_complete || NF === this.fCount;
            }
            return frame = f !== NF ? this.setFrameAt(f) : this.isComplete ? null : (log("CASAnimation.getFrame(): at end of incomplete animation."), this.setFrameAt(NF - 1));
        };
        CASAnimation.prototype.getPreviousFrame = function () {
            var f;
            f = this.fCur - 1;
            if (f < 0) {
                f = this.fCount - 1;
            }
            return this.setFrameAt(f);
        };
        CASAnimation.prototype.getNextFrame = function () {
            var f;
            f = this.fCur + 1;
            if (this.fCount <= f) {
                f = 0;
            }
            return this.setFrameAt(f);
        };
        return CASAnimation;
    })();
    cwaenv.add(CASAnimation, "CASAnimation");
}).call(this);