//-------- js/MorphTarget.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var FourCC, MorphTarget, MorphVertex, RQ, console, cwaenv, document, log, setTimeout;
    cwaenv = this.getCWAEnv();
    console = this.console;
    document = this.document;
    setTimeout = this.setTimeout;
    log = console.log.bind(console);
    FourCC = cwaenv.get("FourCC");
    RQ = cwaenv.get("RotQuat");
    MorphVertex = cwaenv.get("MorphVertex");
    MorphTarget = (function () {
        function MorphTarget() {
            this.fourCCName = 0;
            this.vertices = null;
            this.stdVerticesDesc = [-1, 0, [],
                []
            ];
            this.dupVerticesDesc = [-1, 0, [],
                []
            ];
        }
        MorphTarget.fromJSON = function (jsnmphtgt) {
            var mphtgt;
            mphtgt = new MorphTarget;
            mphtgt.setFromJSON(jsnmphtgt);
            return mphtgt;
        };
        MorphTarget.fromBin = function (avdv) {
            var mphtgt;
            mphtgt = new MorphTarget;
            mphtgt.setFromBin(avdv);
            return mphtgt;
        };
        MorphTarget.prototype.setFromJSON = function (jsnmphtgt) {
            this.fourCCName = FourCC.fourCCInt(jsnmphtgt.morphTargetName);
            return this.vertices = jsnmphtgt.morphSets.map(MorphVertex.fromJSON);
        };
        MorphTarget.prototype.setFromBin = function (avdv) {
            var nMorphSets, s;
            this.fourCCName = avdv.nextStr4cc();
            nMorphSets = avdv.nextUint();
            return this.vertices = (function () {
                var j, ref, results;
                results = [];
                for (s = j = 0, ref = nMorphSets; 0 <= ref ? j < ref : j > ref; s = 0 <= ref ? ++j : --j) {
                    results.push(MorphVertex.fromBin(avdv));
                }
                return results;
            })();
        };
        MorphTarget.prototype.getFourCCName = function () {
            return this.fourCCName;
        };
        MorphTarget.prototype.getVertexCount = function () {
            return this.vertices.length;
        };
        MorphTarget.prototype.getVertices = function () {
            return this.vertices;
        };
        MorphTarget.prototype.getVertex = function (i) {
            return this.vertices[i];
        };
        MorphTarget.prototype.getVertexSegments = function () {
            return [this.stdVerticesDesc, this.dupVerticesDesc];
        };
        MorphTarget.prototype.vertexRangeLimits = function (NV, NVNoDups, dupLists) {
            var dhi, dlo, dv, hi, j, l, len, len1, lo, ref, ref1, v, vtx;
            lo = NVNoDups;
            hi = 0;
            dlo = NV;
            dhi = NVNoDups;
            ref = this.vertices;
            for (j = 0, len = ref.length; j < len; j++) {
                vtx = ref[j];
                v = vtx.getVertexId();
                if (v < lo) {
                    lo = v;
                }
                if (hi <= v) {
                    hi = v + 1;
                }
                ref1 = dupLists[v];
                for (l = 0, len1 = ref1.length; l < len1; l++) {
                    dv = ref1[l];
                    if (dv < dlo) {
                        dlo = dv;
                    }
                    if (dhi <= dv) {
                        dhi = dv + 1;
                    }
                }
            }
            if (hi <= lo) {
                lo = hi = -1;
            }
            if (dhi <= dlo) {
                dlo = dhi = -1;
            }
            return [lo, hi, dlo, dhi];
        };
        MorphTarget.prototype.makeVertexArraySegments = function (NV, NVNoDups, dupLists, headRotQV) {
            var NM, NM3, NMD, NMD3, NV3, NVND, delta, dhi, dlo, dmnorm, dmpos, dmv, dmv3, hi, j, k, l, len, len1, lo, m, mnorm, mpos, mtItem, mv, mv3, n, ref, ref1, ref2, ref3, ref4;
            NV3 = NV * 3;
            NVND = NVNoDups;
            ref = this.vertexRangeLimits(NV, NVND, dupLists), lo = ref[0], hi = ref[1], dlo = ref[2], dhi = ref[3];
            NM = hi - lo;
            NMD = dhi - dlo;
            NM3 = 3 * NM;
            NMD3 = 3 * NMD;
            mpos = new Float32Array(NM3);
            mnorm = new Float32Array(NM3);
            for (k = j = 0, ref1 = NM3; 0 <= ref1 ? j < ref1 : j > ref1; k = 0 <= ref1 ? ++j : --j) {
                mpos[k] = 0;
                mnorm[k] = 0;
            }
            dmpos = new Float32Array(NMD3);
            dmnorm = new Float32Array(NMD3);
            for (k = l = 0, ref2 = NM3; 0 <= ref2 ? l < ref2 : l > ref2; k = 0 <= ref2 ? ++l : --l) {
                dmpos[k] = 0;
                dmnorm[k] = 0;
            }
            delta = [0, 0, 0];
            ref3 = this.vertices;
            for (m = 0, len = ref3.length; m < len; m++) {
                mtItem = ref3[m];
                mv = mtItem.getVertexId();
                mv3 = 3 * (mv - lo);
                RQ.rotateV3(delta, mtItem.getOffset(), headRotQV);
                mpos[mv3] = delta[0];
                mpos[mv3 + 1] = delta[1];
                mpos[mv3 + 2] = delta[2];
                RQ.rotateV3(delta, mtItem.getNormal(), headRotQV);
                mnorm[mv3] = delta[0];
                mnorm[mv3 + 1] = delta[1];
                mnorm[mv3 + 2] = delta[2];
                if (dupLists[mv].length !== 0) {
                    ref4 = dupLists[mv];
                    for (n = 0, len1 = ref4.length; n < len1; n++) {
                        dmv = ref4[n];
                        dmv3 = 3 * (dmv - dlo);
                        dmpos[dmv3] = mpos[mv3];
                        dmpos[dmv3 + 1] = mpos[mv3 + 1];
                        dmpos[dmv3 + 2] = mpos[mv3 + 2];
                        dmnorm[dmv3] = mnorm[mv3];
                        dmnorm[dmv3 + 1] = mnorm[mv3 + 1];
                        dmnorm[dmv3 + 2] = mnorm[mv3 + 2];
                    }
                }
            }
            this.stdVerticesDesc = {
                range: {
                    base: lo,
                    size: NM
                },
                buffers: {
                    pos: mpos,
                    norm: mnorm
                }
            };
            this.dupVerticesDesc = {
                range: {
                    base: dlo,
                    size: NMD
                },
                buffers: {
                    pos: dmpos,
                    norm: dmnorm
                }
            };
            return void 0;
        };
        return MorphTarget;
    })();
    cwaenv.add(MorphTarget, "MorphTarget");
}).call(this);