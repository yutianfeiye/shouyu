//-------- js/Shader.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var Shader, console, cwaenv, document, log, setTimeout;
    cwaenv = this.getCWAEnv();
    console = this.console;
    document = this.document;
    setTimeout = this.setTimeout;
    log = console.log.bind(console);
    Shader = (function () {
        function Shader(gl, vsPath, fsPath, vsSource, fsSource, vsSubs, fsSubs) {
            var a, i, j, k, ref, ref1, shprog, sz, u, vsfsStr;
            this.gl = gl;
            this.vsPath = vsPath;
            this.fsPath = fsPath;
            this.vsSource = vsSource;
            this.fsSource = fsSource;
            this.vsSubs = vsSubs;
            this.fsSubs = fsSubs;
            this._prog = null;
            this._vs = null;
            this._fs = null;
            this._nUniforms = -1;
            this._uniforms = {};
            this._nAttributes = -1;
            this._attributes = {};
            this._vs = this._loadShader(this.vsPath, this.vsSource, this.vsSubs);
            this._fs = this._loadShader(this.fsPath, this.fsSource, this.fsSubs);
            shprog = this.gl.createProgram();
            if (this._vs && this._fs) {
                this.gl.attachShader(shprog, this._vs);
                if (this._fs) {
                    this.gl.attachShader(shprog, this._fs);
                }
                this.gl.bindAttribLocation(shprog, 0, "BindPos");
                this.gl.linkProgram(shprog);
            }
            vsfsStr = "VrtxS=" + this.vsPath + "  FragS=" + this.fsPath;
            if (this.gl.getProgramParameter(shprog, this.gl.LINK_STATUS)) {
                this._prog = shprog;
            } else {
                log("Shader program using: " + vsfsStr + " failed to link: " + (this.gl.getProgramInfoLog(shprog)));
                this.gl.deleteProgram(shprog);
                this._vs = this._fs = null;
            }
            if (this._prog) {
                this._nUniforms = this.gl.getProgramParameter(this._prog, this.gl.ACTIVE_UNIFORMS);
                sz = 0;
                for (i = j = 0, ref = this._nUniforms; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                    u = this.gl.getActiveUniform(this._prog, i);
                    this._uniforms[u.name] = this.gl.getUniformLocation(this._prog, u.name);
                    sz += (this.gl.getActiveUniform(this._prog, i)).size;
                }
                this._nAttributes = this.gl.getProgramParameter(this._prog, this.gl.ACTIVE_ATTRIBUTES);
                for (i = k = 0, ref1 = this._nAttributes; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
                    a = this.gl.getActiveAttrib(this._prog, i);
                    this._attributes[a.name] = this.gl.getAttribLocation(this._prog, a.name);
                }
            }
            this.DO_CHECK_LOC_NAME = false;
        }
        /*  Accessors */
        Shader.prototype.isValid = function () {
            return this._prog !== null;
        };
        Shader.prototype.getHandle = function () {
            return this._prog;
        };
        Shader.prototype.getUniformLocation = function (uName) {
            var ul;
            ul = this._uniforms[uName];
            if (ul === void 0 && this.DO_CHECK_LOC_NAME) {
                log("ERROR: missing GL uniform '" + uName + "'");
            }
            return ul;
        };
        Shader.prototype.getAttributeLocation = function (aName) {
            var al;
            al = this._attributes[aName];
            if (al === void 0 && this.DO_CHECK_LOC_NAME) {
                "ERROR: missing GL attribute '" + aName + "'";
            }
            return al;
        };
        /*  Private helper methods. */
        Shader.prototype._loadShader = function (spath, source, subs) {
            var shader, ssource, strEndsWith;
            strEndsWith = function (s, sfx) {
                var dif;
                dif = s.length - sfx.length;
                return 0 <= dif && (String(sfx)) === s.substring(dif);
            };
            shader = strEndsWith(spath, ".vert") ? this.gl.createShader(this.gl.VERTEX_SHADER) : strEndsWith(spath, ".frag") ? this.gl.createShader(this.gl.FRAGMENT_SHADER) : (log("Unrecognised shader URL suffix: " + spath + "."), null);
            if (shader != null) {
                ssource = subs ? this._applySubs(source, subs) : source;
                this.gl.shaderSource(shader, ssource);
                this.gl.compileShader(shader);
                if (!this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS)) {
                    log("Shader failed: " + spath + ": " + (this.gl.getShaderInfoLog(shader)));
                    shader = null;
                }
            }
            return shader;
        };
        Shader.prototype._applySubs = function (txt, subs) {
            var j, len, ref, repl, stxt, tag, tagpat;
            stxt = txt;
            for (j = 0, len = subs.length; j < len; j++) {
                ref = subs[j], tag = ref[0], repl = ref[1];
                tagpat = "___" + tag + "___";
                stxt = stxt.replace(new RegExp(tagpat, "gm"), repl);
            }
            return stxt;
        };
        return Shader;
    })();
    cwaenv.add(Shader, "Shader");
}).call(this);