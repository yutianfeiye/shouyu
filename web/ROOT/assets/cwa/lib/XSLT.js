//-------- js/XSLT.js --------
// Generated by CoffeeScript 1.12.2
(function () {
    var Data, XSLT, cwaenv, logLev;
    cwaenv = this.getCWAEnv();
    Data = cwaenv.get("Data");
    logLev = 0;
    XSLT = (function () {
        function XSLT(xslURI, lev) {
            this.xslURI = xslURI;
            if (lev != null) {
                logLev = lev;
            }
            this.xsltProcessor = null;
            this.hasXSLTP = typeof XSLTProcessor !== "undefined" && XSLTProcessor !== null;
            XSLT.trace("XSLT processor created for " + this.xslURI);
        }
        XSLT.prototype.applyXSLT = function (theXML) {
            var docRes, docTxt, err, xmlTxt, xmldom;
            XSLT.trace("XSLT stylesheet " + this.xslURI + " apply");
            try {
                if (this.hasXSLTP) {
                    docRes = this.xsltProcessor.transformToDocument(theXML, document);
                } else {
                    xmlTxt = Data.mnDOM(theXML);
                    xmldom = new ActiveXObject("Msxml2.DOMDocument.6.0");
                    xmldom.validateOnParse = true;
                    xmldom.async = false;
                    xmldom.loadXML(xmlTxt);
                    docTxt = xmldom.transformNode(this.xsltProcessor);
                    docRes = Data.toDOM(docTxt);
                }
                return docRes.documentElement;
            } catch (error) {
                err = error;
                console.err("XSLT transform failure: " + err);
                return null;
            }
        };
        XSLT.prototype.syncXSLT = function (theCB) {
            var ssCB;
            if (this.xsltProcessor) {
                return theCB();
            } else {
                ssCB = (function (_this) {
                    return function (ssText) {
                        var ssDOM;
                        if (_this.hasXSLTP) {
                            ssDOM = Data.toDOM(ssText);
                            _this.xsltProcessor = new XSLTProcessor;
                            _this.xsltProcessor.importStylesheet(ssDOM);
                            XSLT.trace("XSLT stylesheet " + _this.xslURI + " parsed");
                        } else {
                            _this.xsltProcessor = new ActiveXObject("Msxml2.DOMDocument.6.0");
                            _this.xsltProcessor.validateOnParse = true;
                            _this.xsltProcessor.async = false;
                            _this.xsltProcessor.loadXML(ssText);
                        }
                        return theCB();
                    };
                })(this);
                return Data.fetchText(this.xslURI, ssCB);
            }
        };
        XSLT.setLogLevel = function (lev) {
            return logLev = lev;
        };
        XSLT.trace = function (str) {
            if (logLev >= 440) {
                return console.log(str);
            }
        };
        return XSLT;
    })();
    cwaenv.add(XSLT, "XSLT");
}).call(this);